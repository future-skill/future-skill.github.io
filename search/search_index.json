{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Future Skill wiki! Here you will find all the documentation you need to write freecodes of varying kinds. You can get started by following one of the links below.</p> <p>In the upper right corner you will find the link to this wiki's git repository. Feel free to create a pull request if you notice any errors or think anything is missing. This wiki uses Material for MkDocs, which allows for easy editing since each page is a modified markdown document.</p>"},{"location":"#basics","title":"Basics","text":"<p>The \"Basics\" pages give an overview of futureskill.com with a focus on the user's point of view.</p> <ul> <li> <p>Overview</p> <p>Get an overview of the community and activities available on Future Skill</p> <p> Coding Community</p> </li> <li> <p>Exercises</p> <p>Explore the different kinds of exercises available</p> <p> Exercises</p> <p> Challenges</p> <p> Tournaments</p> <p> Freecodes</p> </li> <li> <p>Editor</p> <p>Learn how to navigate the editor</p> <p> Freecode editor</p> </li> </ul>"},{"location":"#create-an-exercise","title":"Create an exercise","text":"<p>The pages under \"Create an exercise\" contain the code documentation, and other important information needed to create an exercise, freecode, challenge, or tournament.</p> <ul> <li> <p>Creator</p> <p>Get an overview for how to create your own exercise, freecode, challenge, or tournament</p> <p> Freecode creator</p> </li> <li> <p>Templates</p> <p>Get started by using one of the predefined templates</p> <p> Skeletons</p> </li> <li> <p>Graphics</p> <p>Use the canvas or the powerful <code>World</code> to add interactive elements for your exercises, or maybe use the convenient tables from <code>Data</code></p> <p> Canvas</p> <p> World</p> <p> Data</p> </li> <li> <p>Add explanations</p> <p>Use the flow to give the user some theoretical information, and maybe have them answer a quiz or two</p> <p> Flow</p> </li> </ul>"},{"location":"#legacy","title":"Legacy","text":"<p>As the name implies, \"Legacy\" contains information about the older systems, it is reommended that you instead choose the newer equivalents.</p> <ul> <li>Old graphics - replaced with UI</li> <li>Old implementation - replaced with Skeletons</li> </ul>"},{"location":"#future-skill-gpt-instructions","title":"Future Skill GPT Instructions","text":"<p>As the name implies, \"Future Skill GPT Instructions\" contains information about how to use Future Skill GPT to create exercises.</p>"},{"location":"basics/Canvas_element/","title":"Canvas element","text":"<p>The graphical output in the freecode editor uses the html canvas element with WebGL.</p> <p>If you can not see any contents in the canvas make sure that your browser supports WebGL and that it is enabled. In Chrome for Windows it might help to enter  and enable the \"Override software rendering list\" setting.</p> <p>Instructions for how to create and manage canvas elements in your own implementations: UI</p>"},{"location":"basics/Challenges/","title":"Challenges","text":"<p>In a Challenge, a competitor can create a solution for a specific problem that will then be evaluated and added to a highscore ladder where community members can compete against each other for the top position. Submitting a solution and achieving impressive highscores are rewarded with achievements and experience points.</p> <p>When a solution to a challenge is evaluated it will run against some hidden levels. These hidden levels typically run against a larger data set compared to the public levels that the competitor got to test their code against whilst writing their solution.</p>"},{"location":"basics/Challenges/#tournaments","title":"Tournaments","text":"<p>In a standard challenge you are only competing against a static opponent. However there is a special version of challenges called tournaments where you can compete against your friends and other developers from around the world.</p> <p>Read more about Tournaments here.</p>"},{"location":"basics/Challenges/#create-your-own-challenges","title":"Create your own Challenges!","text":"<p>On Future Skill it is possible to create your own Challenges! This is done with the Freecode creator that you can access from the create option.</p> <p>Read more about the Freecode creator here.</p>"},{"location":"basics/Coding_Community/","title":"Coding Community","text":"<p>In the Future Skill Coding Community, there are several types of activities that members can take part in to practice and improve their coding skills. The following sections describe the Exercise, Challenge, Tournament and Freecode activities. It is also possible to create your own implementations for others, as described at the bottom of this page. But first, the coding Editor should be introduced.</p>"},{"location":"basics/Coding_Community/#the-editor","title":"The Editor","text":"<p>When performing one of the activities mentioned above, the Future Skill coding Editor is used. The Editor consists of four main sections as seen in the image below. On the top left side is a description of the current activity, and below it there is usually some graphical output using a canvas element. On the top right side is the solution section where the programmer writes their solution code, and below it there is a console and score section where the output from running the solution code is shown.</p> <p>The Editor supports a number of programming languages. While programmers are free to choose which language to write their solution code in, it is encouraged to try different ones. In fact, solving a task in multiple languages is usually rewarded with achievements and experience points.</p> <p>Read more about the editor here.</p>"},{"location":"basics/Coding_Community/#exercise","title":"Exercise","text":"<p>An Exercise is usually aimed at introducing programming concepts or to solve for fun and to challenge yourself. Exercises have levels and in order to complete an exercise, all levels must be solved. Completing an exercise is often rewarded with achievements and experience points.</p> <p>Read more about Exercises here.</p>"},{"location":"basics/Coding_Community/#challenge","title":"Challenge","text":"<p>In a Challenge, a competitor can create a solution for a specific problem that will then be evaluated and added to a highscore ladder where community members can compete against each other for the top position. Submitting a solution and achieving impressive highscores are rewarded with achievements and experience points.</p> <p>Read more about Challenges here.</p>"},{"location":"basics/Coding_Community/#tournament","title":"Tournament","text":"<p>Tournament is a special version of a Challenge. In Tournaments, a submitted solution is run against solutions from several different programmers. Each night, a tournament takes place where code from participating programmers compete with others in multiple matches. When the tournament is finished, each solution receives an ELO-rating and an updated placement in the highscore ladder.</p> <p>Read more about Tournaments here.</p>"},{"location":"basics/Coding_Community/#freecode","title":"Freecode","text":"<p>In Freecodes, the programmer is free to do whatever she or he wants to do. Since there is not a specific problem to be solved, a Freecode is not rewarded with any achievements or experience points.</p> <p>Read more about Freecodes here.</p>"},{"location":"basics/Coding_Community/#create-your-own-challenges-and-exercises","title":"Create your own Challenges and Exercises!","text":"<p>On Future Skill it is possible to create your own Challenges, Exercises, and Freecodes! This is done with the Freecode creator that you can access from the create option.</p> <p>Read more about the Freecode creator here.</p>"},{"location":"basics/Exercises/","title":"Exercises","text":"<p>An Exercise is usually aimed at introducing programming concepts or to solve for fun and to challenge yourself. Exercises have levels and in order to complete an exercise, all levels must be solved, which requires receiving a perfect score. Completing an exercise is often rewarded with achievements and experience points.</p> <p>Exercises that have the Official tag are either created or endorsed by Future Skill.</p>"},{"location":"basics/Exercises/#flow-of-solving-an-exercise","title":"Flow of solving an Exercise","text":"<ol> <li> <p>When entering an Exercise you will be presented with level 1, and if the graphical canvas is used you will see it in the bottom left-hand corner with Level 1 visible. If it is your first time using the Editor a tutorial dialoge window will pop up by the Description tab top left - you will notice it has a \"Next tip\" button.</p> </li> <li> <p>Start by reading the description text in the top left part of the web page. Here the problem and what you need to do to solve it is presented and any canvas elements are explained.</p> </li> <li> <p>Click the tab \"API\" in the top left to read about the methods available to you as you write your code and solve the problem. Each method can be expanded by clicking it.</p> </li> <li> <p>Now choose the language you want to use to solve the Exercise, the language picker is in the top right part of the page.</p> </li> <li> <p>In the Solution tab, below the language picker, you see the code window where an initial starting point for solving the problem is shown. You can always return to this initial state by using the red Reset code button, top right. Read through the available methods and their descriptions, as these are also an integral part of understanding the Exercise.</p> </li> <li> <p>Now edit the code and make a first try at a solution.</p> </li> <li> <p>When you want to try out the effects of your code, and check that the code runs without problems, press the \"Run code\" button below the code editor window.</p> </li> <li> <p>Any problems with syntax or runtime errors will show up in the Console window bottom right. If you had none of these the Console might be mostly blank, but you will at least see horizontal blue lines and the step numbers to the very right (e.g. 0/2, 1/2, 2/2 if there are two steps). The \"steps\" is mostly a concept which has to do with each animation increment in the canvas, but it usually also corresponds to the number of times your methods are called. For example, in the \"Apple Picker\" Exercise the \"update\" is called once, but the animation has a step 0/2 for the initial render and a step 2/2 to show the end result. Step 1/2 is when your \"update\" method is called.</p> </li> <li> <p>Continue working on your code until you have solved Level 1. When this happens the canvas will typically inform you that you have solved the level correctly, and the \"Next Level\" button top right will be enabled (it will be a solid blue color). You can also navigate to the next level in the level picker in the top right part of the page. Now click the \"Next Level\" button.</p> </li> <li> <p>Continue solving Level 2, 3 and so forth until you have solved the entire exercise. You should see a toast window appear in the bottom right of the page highlighting that you were awarded experience points for solving the Exercise.</p> </li> </ol>"},{"location":"basics/Exercises/#create-your-own-exercises","title":"Create your own Exercises","text":"<p>On Future skill it is possible to create your own Exercises! This is done with the Freecode creator that you can access from the create option.</p> <p>Read more about the Freecode creator here.</p>"},{"location":"basics/Exercises/#sample-exercises","title":"Sample Exercises","text":"<p>Get inspiration from existing exercises to see how the features provided by Future Skill are used.</p> <ul> <li> <p>Wide Screen \u2013 A sample exercise to get started with the basics of interactive programming challenges, including world creation, character movement, and dynamic view rendering. It also introduces per-level settings, speech bubbles, and score tracking.</p> </li> <li> <p>Global Pos - A sample exercise to explore visual transformations in interactive programming, including offset, anchor, scale, rotation, and pivot. Learners experiment with how these properties affect UI elements when clicking on the canvas. Ideal for understanding coordinate systems and graphical element manipulation.</p> </li> <li> <p>Reversi - A two-player Reversi challenge that teaches turn-based logic, state tracking, and interactive board rendering (Grid). Players implement move strategies, handle flips, and respond to UI interactions with dynamic visuals. Ideal for exploring game rules enforcement, conditional animation, and user-AI gameplay mechanics.</p> </li> <li> <p>World Creator - A multi-level challenge where learners build and validate a 5x5 ecosystem using a custom world grid. It teaches grid manipulation, spatial reasoning, and condition-based logic to populate and animate characters based on environmental rules. Ideal for exploring API design, visual feedback, and dynamic solution evaluation.</p> </li> <li> <p>The Sims - A sample exercise to explore advanced usage of tile-based world creation in UI-driven challenges, including character placement, object decoration, and level layout using coordinate systems. Learners build a dynamic, interactive environment with props, walls, and multiple characters, while managing isometric or top-down perspectives. Great for learning spatial reasoning, world graph construction, and programmatic level design in a reactive canvas.</p> </li> <li> <p>Drag &amp; Drop Sample Exercise - A sample exercise to explore drag-and-drop mechanics in a canvas-based UI challenge. Learners interact with draggable shapes and designated drop zones, triggering visual feedback and logic-based validation through event handlers. Ideal for practicing interactive UI behaviors, event-driven programming, and dynamic object manipulation.</p> </li> <li> <p>Data Tables - A sample exercise to explore advanced usage of data tables in UI-based challenges, including formatting, styling, and dynamic updates. Learners work with multiple tables to apply custom data highlighters, cell formatting, and visual feedback like checklists and conditional coloring. Great for learning structured data manipulation and visual representation in a reactive canvas.</p> </li> <li> <p>Inventory - A sample exercise to learn movement logic, path tracking, and environment interaction in an isometric game world. Learners control a character using keyboard input, manage score deductions based on tile types, and interact with items and containers. Useful for exploring real-time feedback, tile-based world design, and basic game mechanics.</p> </li> <li> <p>Complex Shapes - A visual programming exercise to explore drawing with B\u00e9zier curves using ComplexShape. Learners experiment with different path types\u2014linear, quadratic, and cubic\u2014and control properties like color, stroke, and shape closure across levels. Perfect for understanding vector graphics, shape composition, and custom canvas rendering.</p> </li> <li> <p>Keyboard Input - A sample exercise to explore reactive canvas programming through real-time object manipulation and keyboard-driven interaction. Learners implement movement logic for multiple on-screen objects, respond to key events, and dynamically update object positions within a bounded environment. Ideal for practicing event handling, state management, and interactive UI design. Great for building intuition around animation loops, user input processing, and basic game mechanics in a visual, feedback-rich setting.</p> </li> </ul>"},{"location":"basics/Freecode_editor/","title":"Freecode editor","text":"<p>The Freecode Editor is the tool used to create solutions to Challenges, Exercises, and Freecodes.</p> <p>The Editor consists of four main sections as seen in the image below. On the top left side is a description of the current activity, and below it there is usually some graphical output using a canvas element. On the top right side is the solution section where the programmer writes their solution code, and below it there is a console and score section where the output from running the solution code is shown.</p> <p></p> <p>The Editor supports a number of programming languages. While programmers are free to choose which language to write their solution code in, it is encouraged to try different ones. In fact, solving a task in multiple languages is usually rewarded with achievements and experience points.</p>"},{"location":"basics/Freecode_editor/#create-your-own-implementations","title":"Create your own implementations","text":"<p>The Editor is very similar to the Freecode Creator which you can read more about here: Freecode creator</p>"},{"location":"basics/Freecodes/","title":"Freecodes","text":"<p>In Freecodes, the programmer is free to do whatever they want to do. Since there is not a specific problem to be solved, a Freecode is not rewarded with any achievements or experience points.</p> <p>Example of freecodes could be a graphics demo, a utility for generating pictures, or to do some kind of simulation. The sky is the limit!</p>"},{"location":"basics/Freecodes/#create-your-own-freecodes","title":"Create your own Freecodes!","text":"<p>On Future skill it is possible to create your own Freecodes! This is done with the freecode creator that you can access from the create option.</p> <p>Read more about the Freecode creator here: Freecode creator</p>"},{"location":"basics/How_to_get_experience_points/","title":"How to get experience points","text":"<p>Experience points (XP) is used to measure your progress and allows you to level up in the community.</p> <p>List of activities to that gives experience points:</p> <ul> <li> <p>Fill out the information fields about yourself in the profile.</p> </li> <li> <p>Complete a level in an exercise. Solving the same level in a different language will give addition experience points.</p> </li> <li> <p>Completing all the levels in an exercise gives extra experience points.</p> </li> <li> <p>Submitting a solution to a challenge or tournament.</p> </li> <li> <p>Getting a trophy from a challenge. The higher placement the more experience points you get.</p> </li> <li> <p>Getting achievements.</p> </li> </ul>"},{"location":"basics/Tournaments/","title":"Tournaments","text":"<p>A Tournament is a special type of Challenge where matches are used to create the toplist.</p> <ul> <li>In Tournaments, each submitted solution is run nightly against solutions from several different programmers and gets scored only in comparison with other solutions.</li> <li>In other (non-Tournament) Challenges, each solution gets scored on its own, immediately after it is submitted. These individual scores are then used in the toplist.</li> </ul> <p>Each night, a tournament takes place where code from participating programmers compete with others in multiple matches. Each submitted solution receives an initial ELO-rating of 1000 and this rating is then modified with each match. When the tournament is finished the final rating for the night is used for the toplist. The principle behind this rating is that the rating increase is large when winning against a much stronger (higher rated) opponent, and only a minimal increase is received when beating a much weaker opponent.</p> <p>ELO rating normally only handles 1 vs 1 matches, but since we may have three or more solutions competing in the same match we use multi-player ELO, as described here. A solution starts the next nightly run with the ELO rating it had from the night before, and we use fewer and fewer matches for a solution once the ELO rating has stabilised. If, however, a modified version is submitted we allow more matches to establish the ELO rating of the modified solution.</p> <p>Read more about Challenges here.</p>"},{"location":"basics/Tournaments/#create-your-own-tournaments","title":"Create your own Tournaments","text":"<p>On Future Skill it is possible to create your own Tournaments! This is done with the Freecode creator that you can access from the create option (the \"+ Create\" button to the right on the Exercises, Challenges and Freecode pages).</p> <p>Read more about the Freecode creator here.</p>"},{"location":"create_an_exercise/Create_Sprite_Sheet/","title":"Create Sprite Sheet","text":"<p>Sprite sheets is one of many forms of graphics supported by the Freecode creator. Here we will explore what sprite sheets are and how they can be created for use on Futureskill.</p>"},{"location":"create_an_exercise/Create_Sprite_Sheet/#sprite-sheets","title":"Sprite sheets","text":"<p>A sprite sheet is an image containing many individual images. The sheet must be complemented with an image atlas object that contains the information of where in the sheet sheet each individual image sprite can be found and what animations the images are used for.</p> <p>Sprite sheets compatible with the Futureskill platform require that each individual image is exactly the same size in each sprite sheet. If they are not the same size the images will stretch to accomodate the size defined for the sprite_sheet element in the implementation code.</p> <p>The Sprite sheet atlas must be a JSON compatible with the PIXI.js framework. A free tool that can be used to generate sprite sheets from individual sprite images is spritesheet.js.</p>"},{"location":"create_an_exercise/Create_Sprite_Sheet/#using-spritesheetjs","title":"Using spritesheet.js","text":"<p>Each sprite image must be in the same folder and have the same name, except for a number that should indicate which animation fram that image is. If we have a number of images of skilly being idle that we want to turn into an animation then they could be named <code>skilly_idle_00000.png</code> where the number in the name increases for each fram of animation.</p> <p>If we want to turn the skilly_idle_*.png images into a sprite sheet we can run the command:</p> Turn the skilly idle images into a sprite sheet <pre><code>spritesheet-js -f pixie.js -n skilly_idle_v1 skilly_idle_\\*.png\n</code></pre> <p>Which will create the files <code>skilly_idle_v1.png</code> and <code>skilly_idle_v1.json</code>, where the png is the sprite sheet image and the json is the image atlas containing information about where each sprite is in the sheet.</p> <p>The command above will not remove any white space or compress the image in any way. If we want to remove unnecessary whitespace and compress the image to 25% we can instead run the command:</p> Turn the skilly idle images into a sprite sheet with 25% cimpression <pre><code>spritesheet-js -f pixie.js --scale 25% --trim -n res_25_skilly_idle_v1\nskilly_idle_\\*.png\n</code></pre> <p>Which will create the image <code>res_25_skilly_idle_v1.png</code> and the atlas <code>res_25_skilly_idle_v1.json</code>. A limited example of this can be seen below where a sheet was created with only 3 images. Normally there will be many more in order to create a smooth animation.</p> <p></p>"},{"location":"create_an_exercise/Create_Sprite_Sheet/#atlas-example","title":"Atlas example","text":"The image atlas for the 3 image example above <pre><code>{\n  \"meta\": {\n    \"image\": \"res_25_skilly_idle_v1.png\",\n    \"size\": {\"w\":363,\"h\":198},\n    \"scale\": \"1\"\n  },\n  \"frames\": {\n    \"skilly_idle_00002.png\":\n    {\n      \"frame\": {\"x\":0,\"y\":0,\"w\":126,\"h\":198},\n      \"rotated\": false,\n      \"trimmed\": true,\n      \"spriteSourceSize\": {\"x\":31,\"y\":22,\"w\":126,\"h\":198},\n      \"sourceSize\": {\"w\":188,\"h\":250}\n    },\n    \"skilly_idle_00001.png\":\n    {\n      \"frame\": {\"x\":126,\"y\":0,\"w\":120,\"h\":197},\n      \"rotated\": false,\n      \"trimmed\": true,\n      \"spriteSourceSize\": {\"x\":33,\"y\":23,\"w\":120,\"h\":197},\n      \"sourceSize\": {\"w\":188,\"h\":250}\n    },\n    \"skilly_idle_00000.png\":\n    {\n      \"frame\":{\"x\":246,\"y\":0,\"w\":117,\"h\":195},\n      \"rotated\":false,\n      \"trimmed\":true,\n      \"spriteSourceSize\":{\"x\":33,\"y\":25,\"w\":117,\"h\":195},\n      \"sourceSize\":{\"w\":188,\"h\":250}\n    }\n  }\n}\n</code></pre>"},{"location":"create_an_exercise/Create_Sprite_Sheet/#define-animations","title":"Define animations","text":"<p>The image atlas created by <code>spritesheet.js</code> will not contain any animations. When uploading the sheet in the freecode creator you also have to uplad the image atlas. While doing this it is possible to use a \"Generate Animation\" button that will create a \"default\" animation iterating over all the images in the sheet orderd by their individual image number from the individual image names. The animations are added as a list of frames in the image atlas. To add additional animations from the same sheet just add another list element in the image atlas and the key associated with the list will be that animations name.</p> <p>The 3 image example above resulted in the following image atlas after the image was uploaded to Futureskill and a default animation was generated:</p> The image atlas with generated default animation for the 3 image example above <pre><code>{\n  \"meta\": {\n    \"image\": \"res_25_skilly_idle_v1.png\",\n    \"size\": {\n      \"w\": 363,\n      \"h\": 198\n    },\n    \"scale\": \"1\"\n  },\n  \"frames\": {\n    \"skilly_idle_00002_png\": {\n      \"frame\": {\n        \"x\": 0,\n        \"y\": 0,\n        \"w\": 126,\n        \"h\": 198\n      },\n      \"rotated\": false,\n      \"trimmed\": true,\n      \"spriteSourceSize\": {\n        \"x\": 31,\n        \"y\": 22,\n        \"w\": 126,\n        \"h\": 198\n      },\n      \"sourceSize\": {\n        \"w\": 188,\n        \"h\": 250\n      }\n    },\n    \"skilly_idle_00001_png\": {\n      \"frame\": {\n        \"x\": 126,\n        \"y\": 0,\n        \"w\": 120,\n        \"h\": 197\n      },\n      \"rotated\": false,\n      \"trimmed\": true,\n      \"spriteSourceSize\": {\n        \"x\": 33,\n        \"y\": 23,\n        \"w\": 120,\n        \"h\": 197\n      },\n      \"sourceSize\": {\n        \"w\": 188,\n        \"h\": 250\n      }\n    },\n    \"skilly_idle_00000_png\": {\n      \"frame\": {\n        \"x\": 246,\n        \"y\": 0,\n        \"w\": 117,\n        \"h\": 195\n      },\n      \"rotated\": false,\n      \"trimmed\": true,\n      \"spriteSourceSize\": {\n        \"x\": 33,\n        \"y\": 25,\n        \"w\": 117,\n        \"h\": 195\n      },\n      \"sourceSize\": {\n        \"w\": 188,\n        \"h\": 250\n      }\n    }\n  },\n  \"animations\": {\n    \"default\": [\n      \"skilly_idle_00000_png\",\n      \"skilly_idle_00001_png\",\n      \"skilly_idle_00002_png\"\n    ]\n  }\n}\n</code></pre>"},{"location":"create_an_exercise/Data/","title":"Data","text":"<p>This article goes through how to use the Data library to manage data and create tables in the canvas.</p>"},{"location":"create_an_exercise/Data/#overview","title":"Overview","text":"<p>The library can currently only be used to make tables, but other types of data views might be available in the future.</p> <p>The classes provided in this module are not UI elements, but they have a render method that can be used to create an initial element or update the created element.</p> <code>DataTable</code> example <p><pre><code>table = DataTable()\ntable[:, :] = [[\"Name\",\"Count\"], [\"Jane\", 9], [\"Joe\", 7]]\ntable.render(parent=self.canvas, size=self.canvas.size, position=self.canvas.size / 2)\n</code></pre> </p> <p>Each type of data manager has an abstract base class which provides the common functionality.</p> <p>Note</p> <p>All classes on this page need to be imported from <code>lib.data</code>.</p>"},{"location":"create_an_exercise/Data/#tables","title":"Tables","text":"<p>Tables show data as rows and columns. A number of leading/trailing rows/columns can be marked as headers/footers and will be handled slightly differently from normal rows/columns. There are various tools for formatting and styling cells based on position and/or contents.</p>"},{"location":"create_an_exercise/Data/#attributes","title":"Attributes","text":"<p>The following attributes are available for all tables and can be specified in the constructor:</p> <code>transpose</code> - <code>bool</code> Show rows as columns and vice versa, useful as rows and columns are not functionally identical. <code>default_data_formatter</code> - <code>Callable[[int, int, Any], str | BaseElement]</code> Used to format all non-header/footer cells that have not already been formatted <code>column_data_formatters</code> - <code>dict[int, Callable[[int,_int,_Any],_str|BaseElement]] | None</code> Used to format all non-header/footer cells of the indicated columns, other columns are formatted using the default formatter <code>default_data_highlighter</code> - <code>Callable[[int, int, Any], CellStyle | None]</code> Used to apply highlight styles to all non-header/footer cells that have not already been highlighted <code>column_data_highlighters</code> - <code>dict[int, Callable[[int,_int,_Any],_CellStyle|None]] | None</code> Used to apply highlight styles to all non-header/footer cells of the indicated columns, other columns are styled using the default highlighter <code>default_cell_style</code> - <code>CellStyle</code> Used as base style for non-header/footer cells <code>default_header_cell_style</code> - <code>CellStyle</code> Used as base style for header/footer cells <code>default_cell_highlighter</code> - <code>Callable[[int, int, AbstractTable], CellStyle]</code> Used to apply base styles for cells, can be used to add patterns to the table, default uses the the default styles <code>cell_styles</code> - <code>dict[tuple[int, int], CellStyle] | None</code> Overrides the highlight styles for specific cells <code>cell_padding</code> - <code>float</code> How much padding to add within each cell <code>default_row_align</code> - <code>\"top\" | \"bottom\" | \"center\"</code> How to align the cell content of all rows unless otherwise specified <code>default_column_align</code> - <code>\"left\" | \"right\" | \"center\"</code> How to align the cell content of all columns unless otherwise specified <code>row_alignments</code> - <code>list[\"top\" | \"bottom\" | \"center\" | None]</code> Set row alignment for specific rows <code>column_alignments</code> - <code>list[\"left\" | \"right\" | \"center\" | None]</code> Set column alignment for specific columns <code>row_proportions</code> - <code>list[float]</code> Set row proportions, 0 means divide remaining evenly <code>column_proportions</code> - <code>list[float]</code> Set column proportions, 0 means divide remaining evenly <code>grid_line_size</code> - <code>float | None</code> The thickness of the grid lines, <code>None</code> disables the lines completely <code>compact_mode</code> \u2013 bool (default: False) Renders the table with reduced padding and spacing to save screen space. <code>fixed_cell_size</code> \u2013 bool (default: False) Forces all table cells to have the same fixed width and height, regardless of their content."},{"location":"create_an_exercise/Data/#methods","title":"Methods","text":"<p>The following methods are available for all tables:</p> <code>table.render()</code> Create or update the UI element for this table, any arguments given to this method is forwarded to the UI element when created <code>table.get_cell_value(row, column)</code> Returns the value for the given cell, returns <code>None</code> if the cell is empty <code>table.get_formatted_value(row, column)</code> Returns the cell value formatted as a text string or as a UI element <code>table.get_cell_style(row, column)</code> Returns the highlight style for the given cell <code>table.get_cell_style_list(row, column)</code> Returns a list of styles that apply to the given cell, in decreasing priority <code>table.get_cell_alignments(row, column)</code> Returns the x and y alignments for the given cell <code>table.is_special_row(row)</code> Returns <code>True</code> if the row is a header or footer row <code>table.is_special_column(column)</code> Returns <code>True</code> if the column is a header or footer column"},{"location":"create_an_exercise/Data/#calculated-properties","title":"Calculated properties","text":"<p>The following calculated properties are available for all tables:</p> <code>row_count</code> - <code>int</code> Total number of table rows, including headers and footers <code>column_count</code> - <code>int</code> Total number of table columns, including headers and footers <code>header_row_count</code> - <code>int</code> Total number of header rows <code>header_column_count</code> - <code>int</code> Total number of header columns <code>footer_row_count</code> - <code>int</code> Total number of footer rows <code>footer_column_count</code> - <code>int</code> Total number of footer columns <p>The <code>AbstractTable</code> class is the base class for table data managers.</p>"},{"location":"create_an_exercise/Data/#datatable","title":"<code>DataTable</code>","text":"<p>The <code>DataTable</code> class is used to create tables by manually entering data.</p> <p>This is done through indexing:</p> Indexing <code>DataTable</code> <p><pre><code>table = DataTable(header_row_count=1)\ntable[1, 1] = 5  # Set value for a single table cell\ntable[0, :] = [\"Name\", \"Count\"]  # Set values for multiple cells (first row)\ntable[1:, :] = [[\"Jane\", 9], [\"Joe\", 7]]  # Set values for multiple rows and columns\ntable.render(parent=self.canvas, size=self.canvas.size, position=self.canvas.size / 2)\n</code></pre> </p> <p>The same indexing syntax can be used to extract data from the table.</p> <p>The data table will automatically keep track of how many rows and columns the table has (based on the highest written row/column). Currently there is no way to delete/reset cells, so these counts will not be lowered.</p> <p>You will have to manually specify the number of header/footer rows and columns using <code>header_row_count</code>, <code>header_column_count</code>, <code>footer_row_count</code>, and <code>footer_column_count</code>.</p>"},{"location":"create_an_exercise/Flow/","title":"Flow","text":"<p>A flow is an overlay that is displayed before the user attempts an exercise level. The flow should typically contain an overview description of the level with some images, quizzes, and/or interactive canvas.</p> <p>Use the flow structure below to build flow levels:</p> <ul> <li>Starts with some historical or general knowledge about the topic</li> <li>Have a clear description of the topic</li> <li>Description should be like a lesson with as much as possible information. It should not be brief.</li> <li>See the Tags section below for instructions on how to use tags when building the topic description.</li> <li>Always have programming language-specific content (details are explained in section below (Other Tags)) if needed</li> <li>An example and explanation should be for each programming language if needed</li> <li>Should not have solution code or such for the given topic</li> <li>Include at least 2 quiz questions based on the theory provided in the level</li> <li>Use the Quiz Format below (see section \"Quiz\" and \"Tags\" below)</li> <li>After the last quiz have the lines below:</li> </ul> After Last Quiz <pre><code>[continue]\n[coding][english]Let's code now!!![/english][swedish]Nu kodar vi![/swedish][/coding]\n</code></pre> <ul> <li>Keep the flow easy to read, logically structured, and visually clear</li> <li>Avoid overly technical language unless needed</li> <li>Structure all levels consistently</li> </ul>"},{"location":"create_an_exercise/Flow/#tags","title":"Tags","text":""},{"location":"create_an_exercise/Flow/#levels","title":"Levels","text":"<p>Flows need to be separated for different levels, so that each level has it's own flow. To write a flow specific to a level the <code>[level?]</code> tag is used - where <code>?</code> is the level number starting at 1.</p> Example <p><pre><code>[level1]\nThis is shown during the flow for Level 1.\n[/level1]\n[level2]\nThis is shown during the flow for Level 2.\n[/level2]\n</code></pre> The above text will depending on which level the user is at render as the following in the flow:</p> Level 1Level 2 <p>This is shown during the flow for Level 1.</p> <p>This is shown during the flow for Level 2.</p> <p>Warning</p> <p>The <code>[level?]</code> tags cannot share a row with anything else, not even other <code>[level?]</code> tags or their own content.</p>"},{"location":"create_an_exercise/Flow/#continue-and-coding-buttons","title":"Continue and Coding Buttons","text":"<p>There are two predefined buttons that can be included for the user to press to continue inside the flow or exit it.</p> <p>The <code>[continue]</code> button is a self closing tag that does not take any content. It defined the end of a segment within the flow so that everything below it is hidden until the user presses the button.</p> <p>The <code>[coding]</code> button is used as a final button in the flow for the user to exit the flow and go back to the coding editor. It takes a body which is the button's text.</p> Coding tag for a button with the text \"Start coding\" <p><pre><code>[coding]Start coding[/coding]\n</code></pre> </p> <p>Warning</p> <p>It is not possible to have any continue/coding buttons inside language tags (ex. <code>[english][/english]</code>).</p> <p>Warning</p> <p><code>[continue]</code> and <code>[coding]</code> tags cannot share a row with anything else.</p>"},{"location":"create_an_exercise/Flow/#quiz","title":"Quiz","text":"<p>A quiz is a question/answer section that the user can interact with and get either right or wrong.</p> Name Description <code>quiz</code> The main wrapping tag <code>question</code> The question that is prompted to the user <code>hint</code> A hint to the user that can help it if needed <code>explanation</code> A more detailed explanation of the question's context <code>option-correct</code> The correct answer to the quiz <code>option</code> An incorrect answer to the quiz <code>feedback-correct</code> The text that is shown to the user if it answers correctly <code>feedback-incorrect</code> The text that is shown to the user if it answers incorrectly"},{"location":"create_an_exercise/Flow/#tags_1","title":"Tags","text":"<p>Warning</p> <p>All tags are required, but if for example <code>[hint]</code> or <code>[explanation]</code> are left empty they will not render in the flow.</p> Quiz <pre><code>[quiz]\n  [question]What is the main operation performed by Bubble Sort?[/question]\n  [hint]Consider what happens after a comparison shows two elements not in order[/hint]\n  [explanation]Swap is the action of switching the position of two elements which are not sorted.[/explanation]\n\n  [option-correct]Swapping[/option-correct]\n  [option]Merging[/option]\n  [option]Insertion[/option]\n  [option]Splitting[/option]\n\n  [feedback-correct]Good job![/feedback-correct]\n  [feedback-incorrect]Almost there[/feedback-incorrect]\n[/quiz]\n</code></pre> QuizHintExplanationCorrect answerIncorrect answer <p></p> <p></p> <p></p> <p></p> <p></p> <p>A <code>[continue]</code> or <code>[coding]</code> tag is often needed after the quiz.</p>"},{"location":"create_an_exercise/Flow/#interact","title":"Interact","text":"<p>You can add a canvas from one of the levels in a flow. This can be done using the <code>[interact-?]</code> tag - where <code>?</code> is the level number starting at 1.</p> Interact tag <pre><code>[interact-1]\n</code></pre> <p>Warning</p> <p>A <code>[continue]</code> tag is needed before and after the interact tag.</p>"},{"location":"create_an_exercise/Flow/#other-tags","title":"Other tags","text":"<p>Several other tags which work in the Description are also supported in the flow, such as:</p> <ul> <li> <p>Language tags, e.g. <code>[swedish]</code> and <code>[english]</code></p> </li> <li> <p>Programming language tags, e.g. <code>[python]</code> and <code>[c|cpp]</code></p> </li> <li> <p>Switches with default, for example:</p> </li> </ul> Switch with default <p><pre><code>[switch]\n  [python]\"is\" or \"==\" depending on what you are comparing[/python]\n  [javascript|typescript]===[/javascript|typescript]\n  [default]==[/default]\n[/switch]\n</code></pre> Depending on which language the user is using it will be rendered as:</p> PythonJavaScriptTypeScriptSome other language <p>\"is\" or \"==\" depending on what you are comparing</p> <p>===</p> <p>===</p> <p>==</p> <ul> <li>Translation tables, e.g.</li> </ul> Translation table, hello <p><pre><code>[translate]\n  [from]hello[/from]\n  [python]HELLO!!!![/python]\n  [c|cpp]_h_e_l_l_o_[/c|cpp]\n  [default]h e l l o . . .[/default]\n[/translate]\n</code></pre> If we have the translation table above and write <code>*hello</code> in our flow, it will be rendered as something different depending on which language you are using.</p> PythonCC++Some other language <p>HELLO!!!!</p> <p>_h_e_l_l_o_</p> <p>_h_e_l_l_o_</p> <p>h e l l o . . .</p> Translation table, programming language <p><pre><code>[translate]\n  [from]language[/from]\n  [c]C[/c]\n  [c_sharp]C#[/c_sharp]\n  [cpp]C++[/cpp]\n  [go]Go[/go]\n  [java]Java[/java]\n  [kotlin]Kotlin[/kotlin]\n  [javascript]JavaScript[/javascript]\n  [typescript]TypeScript[/typescript]\n  [php]PHP[/php]\n  [python]Python[/python]\n  [ruby]Ruby[/ruby]\n  [rust]Rust[/rust]\n  [scala]Scala[/scala]\n  [default]the programming language at hand[/default]\n[/translate]\n</code></pre> If you have the translation table below and type <code>*language</code> in the flow it will show as the language the user is using:</p> CC#C++GoJavaKotlinJavaScriptTypeScriptPHPPythonRubyRustScalaSome other language <p>C</p> <p>C#</p> <p>C++</p> <p>Go</p> <p>Java</p> <p>Kotlin</p> <p>JavaScript</p> <p>TypeScript</p> <p>PHP</p> <p>Python</p> <p>Ruby</p> <p>Rust</p> <p>Scala</p> <p>the programming language at hand</p>"},{"location":"create_an_exercise/Freecode_creator/","title":"Freecode creator","text":"<p>You can design and publish your own Challenges, Exercises, and Freecodes </p> <p>The Creator is very similar to the Freecode Editor which you can read more about here: Freecode editor on Future Skill using the Freecode Creator. Just sign in, click Create, and select Freecode to get started.</p>"},{"location":"create_an_exercise/Freecode_creator/#the-implementation-tab","title":"The Implementation Tab","text":"<p>This is where you as the author design your Freecode:</p> <ul> <li>Write your creator code: call solution methods,    generate graphics, define scoring.</li> <li>It acts as the \u201cengine\u201d behind the Freecode.</li> <li>For detailed logic patterns, visit the Skeletons page (link).</li> </ul>"},{"location":"create_an_exercise/Freecode_creator/#the-solution-tab","title":"The Solution Tab","text":"<p>The solution tab contains a default solution that is used when running the code in the creator. This is not visible for the Members when opening the Freecode. Here you as the author can create a solution to your own Freecode to try it. The member will see the methods with just the default return values (See API Tab). This solution is also the default solution used in contests when there are no other contestants to compete against.</p>"},{"location":"create_an_exercise/Freecode_creator/#the-api-tab","title":"The API Tab","text":"<p>Manage two types of APIs:</p> <ul> <li>Implementation APIs: provide supporting methods for users.</li> <li>Solution APIs: define the stubs users must implement.</li> </ul> <p></p>"},{"location":"create_an_exercise/Freecode_creator/#add-implementation-api","title":"Add Implementation API","text":"<p>The implementation methods are the methods that you as a creator provide to the taker of your Freecode. This gives the taker the ability to call your API to get information that you make available to them. Brings up the dialog to add a method to the implementation. After the method is added the method with the given signature is added automatically to the implementation.</p>"},{"location":"create_an_exercise/Freecode_creator/#add-solution-api","title":"Add Solution API","text":"<p>The solution methods are the methods that the user that takes the Freecode fills in to create their solution. Clicking the button brings up the dialog to add a method to the solution. After the method is added the method with the given signature is added automatically to the solution.</p> <p>While adding solution api using Future Skill Gpt use the instructions below:</p> <p>Solution API - A Solution API is a Python function template created for the user to input their solution for a specific task at a specific level. - A Solution API is a template and must not contain any actual solution or logic - The function must always end with the following lines:</p> <p><pre><code># Write your code here\nreturn []\n</code></pre> - Each level can have only one Solution API. - This rule applies to all levels and all tasks. - Do not include sample data, example inputs/outputs, or logic in the function body.</p> <p>Function Name</p> <p>The function name must include the word \"level\", followed by the level number, and a descriptive phrase of what the function does. For example: If you're creating a function for level 1 that adds names to a table, the function name should be:</p> <pre><code>def level_1_add_names(self, arg_1, arg_2):\n    # Write your code here\n    return [] \n</code></pre> <p>Argument Type</p> <p>Arguments passed to the Solution API can only be one of the following types: - int - bool - double - string - bytes - list - map</p> <p>Return Type</p> <p>The return value must also be one of the following types: - int - bool - double - string - bytes - list - map</p> <p>Solution API Format</p> <pre><code>def level_&lt;number&gt;_&lt;function_description&gt;(self, arg_1, arg_2):\n    \"\"\"\n    :type arg_1: type\n    :type arg_2: type\n\n    :rtype: type\n    \"\"\"\n\n    # Write your code here\n    return []  \n</code></pre> <p>List Handling - if argument type or return type is a list show the type of the values in the list as follows:</p> <p>list[] - The value_type must be one of the following types:   - int   - bool   - double   - string   - bytes   - list   - map"},{"location":"create_an_exercise/Freecode_creator/#regenerate-skeletons","title":"Regenerate Skeletons","text":"<p>Regenerates the skeletons for all the different languages. These can be viewed under the Preview tab. This is what the user who takes the Freecodes starts from. The python skeleton is equivalent to what you see in the solution tab after you press \"Reset Solution\"</p>"},{"location":"create_an_exercise/Freecode_creator/#reset-implementation","title":"Reset Implementation","text":"<p>Resets the implementation. This will remove any code written by you in the implementation tab and give you the empty skeleton code with the implementation methods from the API tab.</p>"},{"location":"create_an_exercise/Freecode_creator/#reset-solution","title":"Reset Solution","text":"<p>Resets the solution. This will remove any code written by you in the solution tab and gives you the empty methods from the solution API. This can be good to use if you have added and removed Solution APIs and want to make sure you are writing for the latest functions.</p>"},{"location":"create_an_exercise/Freecode_creator/#create-api-method","title":"Create API Method","text":"<p>All method names must be space-separated list of words containing lowercase letters and can't start with a number. Specific language formatting is applied automatically. Default return values for different return types in solution methods: </p> Data type Default return value <code>int</code> <code>-2</code> <code>double</code> <code>-2.0</code> <code>bool</code> <code>False</code> <code>string</code> <code>'Foo'</code> <code>byte</code> <code>b'foo'</code> <code>list</code> <code>[]</code> <code>map</code> <code>{}</code> <p>For implementation methods you get raise NotImplementedError('\"APImethod\" not implemented') as default regardless of the return type.</p>"},{"location":"create_an_exercise/Freecode_creator/#the-graphics-tab","title":"The Graphics Tab","text":"<p>Configure canvas, animations, images, and resolution:</p> <ul> <li>Enable/disable canvas and animations.</li> <li>Upload PNGs or sprite sheets.</li> <li>Set canvas resolution, background color, and thumbnails.</li> </ul> <p></p>"},{"location":"create_an_exercise/Freecode_creator/#canvas-animation","title":"Canvas Animation","text":"Uses Canvas: Check this if the canvas will be used. Has Canvas Animation: Check this to enable canvas animations. This will additionally add the option Canvas step time (ms), which will determine how many milliseconds will pass between each canvas animation step. Supports Interact: Check this to enable interactive mode. This will additionally add one check box for each level to determine what levels will be interactable. Interact using Human Adapter: Lorem ipsum Interact using separate step time: Check this to set a different step time in the interactive mode. This will additionally add the option Interact step time (ms), which will determine how many milliseconds will pass between each canvas animation step in the interactive mode. <p>If the canvas should be used, if it should be animated, and if the implementation supports human input. If the canvas is animated then there is also a setting for how long each animation step should be.</p>"},{"location":"create_an_exercise/Freecode_creator/#images","title":"Images","text":"<p>Here you can upload images to be used as graphical elements in the canvas. The possible usages are individual bitmaps or as sprite sheets.</p> <p>Images should typically be PNG image files with transparent backgrounds for the best result. There are many built in images that can be accessed without any need to upload them, see Built in images for a full list.</p> <p>Sprite sheets needs a separate image atlas that define where each image in the sheet is placed, this atlas has to be in json format compatible with pixi.js. You can read more about this on the Create Prite Sheet page.</p>"},{"location":"create_an_exercise/Freecode_creator/#background-color","title":"Background Color","text":"<p>The canvas background color is the color that will be displayed as a background behind any graphical elements that are added in the implementation.</p> <p>Default background colors:</p> <ul> <li>Light mode: #F2F5F7</li> <li>Dark mode:</li> </ul>"},{"location":"create_an_exercise/Freecode_creator/#resolution","title":"Resolution","text":"<p>The resolution decided the dimensions of the canvas element, and what coordinates should be used to display elements in the implementation. 10x20 will have the same dimensions as 100x200, but in order to display graphics precise locations in a 10x20 canvas you might have to use more decimal points than if the canvas is 100x200. Additionally, some graphics elements will display differently at different resolutions.</p>"},{"location":"create_an_exercise/Freecode_creator/#landing-page-image","title":"Landing Page Image","text":"<p>The default landing page image used by challanges and exercises. This image will be used as both background and thumbnail for the implementation.</p>"},{"location":"create_an_exercise/Freecode_creator/#settings-tab","title":"Settings Tab","text":"<p>Configure Freecode metadata:</p> <ul> <li>Select challenge type, difficulty, tournaments.</li> <li>Set public/hidden levels, performance thresholds.</li> <li>Enable community sharing, official tag, and version control.</li> <li>A mismatch between the total number of levels and the number of levels in the implementation <code>_configurations</code> variable can lead to an error.</li> </ul> <p></p>"},{"location":"create_an_exercise/Freecode_creator/#test-meta","title":"Test Meta","text":"Is Tournament: This setting is only visible if when the type of Freecode is set to Challenge. When checked this setting turns the Challenge into a Tournament. For an explanation of the difference between Challenge and Tournament see: Coding Community Number of players: This setting is only visible if \"Is Tournament\" is checked. This setting will determine the number of solution that will compete against each other in every run. Is Freecode: This setting is only visible when the type of Freecode is set to Exercise. When checked this setting turns the Exercise into a Freecode. For an explanation of the difference between Exercise and Freecode see: Coding Community Difficulty: This is the displayed difficulty for the Freecode in the Freecode browser."},{"location":"create_an_exercise/Freecode_creator/#level-settings","title":"Level Settings","text":"Number of public levels: These are the levels that the members can see when taking your Freecode. Number of hidden levels: This is only used for the \"Code test\" and \"Challenge\" type of Freecode.   These levels are hidden and can't be seen by the member.   These are the levels that are used for the scoring of the Freecode.   So normally extra edge cases are used in these levels to see that the members solution can handle all the edges that you are a part of the Freecode. Exercise: For exercises there are only public levels, however only 1 is available at the time.   This means the member must complete one levels before being able to continue to the next one.   There is no hidden scoring here. Code test and challenges: The public levels are what is visible to the member when taking the Freecode.   These are the levels that they can try their solutions against and see if they pass.   These levels are not used in scoring the Freecode.   That is handled in the hidden and performance levels. Performance levels: This is only used for the Code test type of Freecode.   On top of the normal correctness check of the solution an additional check of how much times was used is added.   You as the author must specify this time limit in milliseconds for each of the programming languages available on Future Skill.   For performance levels using much larger input data is recommended.   The time limit if set per language."},{"location":"create_an_exercise/Freecode_creator/#good-performance-scores","title":"Good performance scores","text":"<p>Only available for code tests with Performance levels.</p>"},{"location":"create_an_exercise/Freecode_creator/#community","title":"Community","text":"Public Implementation: When this is checked your Freecode will be available to other community members to copy and use as a starting point for their own Freecodes.   Only checking this will not allow them to see your solution.   So it cant be used for cheating. Public Solution: When you make your solution available members will be able to see and copy your solution.   So this can lead to \"cheating\", especially in the case of Exercises. Use official tag: When this is checked your Freecode will have the official tag. Is Flow: When this is checked your Freecode will have a flow, see more on the Flow page."},{"location":"create_an_exercise/Freecode_creator/#versioning","title":"Versioning","text":"<p>Manage versions of the implementation. Using this it is only possible to move forwards in versions with 1 live version and 1 work in progress version. It is still possible to open old versions and export them to test them out or to import as the current version.</p>"},{"location":"create_an_exercise/Freecode_creator/#the-preview-tab","title":"The Preview Tab","text":"<p>The preview tabs show you the code the user from use as a starting point in the available languages.</p> <p>You can also see the API methods available to the user with the languages specific formatting. The solution methods are the method signatures the user taking the Freecode will see and are the same methods that are in the skeletons above. The Challenge methods are the signatures for the API tab the member will see and use when taking the Freecode.</p> <p></p>"},{"location":"create_an_exercise/Freecode_creator/#descriptions","title":"Descriptions","text":""},{"location":"create_an_exercise/Freecode_creator/#description","title":"Description","text":"<p>This is the descriptions that a user can see in the editor when participating in a challenge or taking an exercise. This description should contain details about what to do, how it can be done, and how the result will be scored.</p> <p>Use the description structure below :</p> <ul> <li>Provide a general description of the challenge or exercise (should not have theoretical knowledge about the topic).</li> <li>Use semi-formal but simple, clear language.</li> <li>A light joke or two is okay, but the tone should stay informative \u2014 not humorous overall.</li> <li>See the Tags section below for instructions on how to use tags when building the topic description.</li> <li>Provide the information in both English and Swedish, directly one after the other if needed:</li> <li>English text must be wrapped with [english] ... [/english].</li> <li>Swedish text must be wrapped with [swedish] ... [/swedish].</li> <li>A challenge or an exercise has levels. Use the structure below for levels:</li> <li>Each difficulty level must start with [level] and end with [/level]. <li>Give each level a descriptive name that acts like a title for that level\u2019s task.</li> <li>Each level must include the following:<ul> <li>A part of the challenge or exercise description that user must solve in that level</li> <li>An example showing both input and output.</li> <li>An explanation of the example</li> <li>An API Helper Function explanation (if needed)</li> <li>Do not mention or include anything about the Solution API.</li> <li>Write all the information both in English and Swedish, directly after each other:</li> <li>English text must be wrapped with [english] ... [/english].</li> <li>Swedish text must be wrapped with [swedish] ... [/swedish].</li> </ul> </li> <li>Each level may include an implementation APIs<ul> <li>Introduce the implementation API as part of the task (e.g., \"You can use the following function to...\").</li> </ul> </li> <li>Make sure the task is easy to follow, logically structured, and visually clear where needed.</li> <li>All content must be bilingual if it needed by a user otherwise default is English:</li> <li>Use [english] ... [/english] for English text.</li> <li>Use [swedish] ... [/swedish] for Swedish text.</li> <li>Always use the tags described below when it is needed.</li>"},{"location":"create_an_exercise/Freecode_creator/#tags","title":"Tags","text":"<p>You can use special tags to manage what text is displayed. To write text which only is visible when Level 1 is selected in an exercise, write:</p> Using level tags <pre><code>[level1]\nThis text is for level 1\n[/level1]\n</code></pre> <p>You can also use <code>[level2]</code>, <code>[level3]</code> and so forth.</p> <p>To write text only visible when certain languages are selected you can change the value in the tags to one of c, c_sharp, cpp, go, java, javascript, php, python, ruby, scala, typescript, rust, kotlin.</p> Using language tags <pre><code>[python]\nThis text is only visible if you are using python\n[/python]\nYour language tag is: [c]c[/c][c_sharp]c_sharp,[/c_sharp][cpp]cpp[/cpp][go]go[/go][java]java[/java][javascript]javascript[/javascript][php]php[/php][python]python[/python][ruby]ruby[/ruby][scala]scala[/scala][typescript]typescript[/typescript][rust]rust[/rust][kotlin]kotlin[/kotlin]\n</code></pre> <p>You can also do tags that are visible for multiple levels and/or languages by separating the tags with |</p> Combining tags <pre><code>[c|cpp]Your language is either C or C++[/c|cpp]\n[level1|level2]\nThis text is visible for both the first and second level!\n[/level1|level2]\n</code></pre> <p>If you want a default value there is also a switch options.</p> Using a switch tag <p><pre><code>Here is a logical equals operator: [switch]\n[python]\"is\" or \"==\" depending on what you are comparing[/python]\n[javascript|typescript]===[/javascript|typescript]\n[default]==[/default]\n[/switch]\n</code></pre> Depending on which language the user is using it will be rendered as:</p> PythonJavaScriptTypeScriptSome other language <p>Here is a logical equals operator: \"is\" or \"==\" depending on what you are comparing</p> <p>Here is a logical equals operator: ===</p> <p>Here is a logical equals operator: ===</p> <p>Here is a logical equals operator: ==</p> <p>Finally there is also a translation dict that can replace multiple instances of the same text based on the contents. The text to replace must be prepended with a <code>*</code>. Each word or phrase to replace needs its own translation definition. If there is no match or default text the from text will be replaced with an empty string.</p> Using a translate tag <p><pre><code>[translate]\n[from]hello[/from]\n[python]HELLO!!!![/python]\n[c|cpp]_h_e_l_l_o_[/c|cpp]\n[default]h e l l o . . .[/default]\n[/translate]\n</code></pre> If we have the translation table above and write <code>*hello</code> in our flow, it will be rendered as something different depending on which language you are using.</p> PythonCC++Some other language <p>HELLO!!!!</p> <p>_h_e_l_l_o_</p> <p>_h_e_l_l_o_</p> <p>h e l l o . . .</p>"},{"location":"create_an_exercise/Freecode_creator/#summary","title":"Summary","text":"<p>This is the public description used externally to entice participants and to give a brief overview of what the challenge or exercise contains and/or should teach/test.</p>"},{"location":"create_an_exercise/Freecode_creator/#flow","title":"Flow","text":"<p>This is where you edit the flow, see Flow for more information.</p>"},{"location":"create_an_exercise/Freecode_creator/#run-code","title":"Run Code","text":"<p>The \"Run Code\" button will let you run your solution like you are a member taking the Freecode. You will see the output in the canvas and console just like if you were taking the Freecode as a member. If you check the \"Save On Run\" checkbox you will also save every time you run the code.</p> <p>If you are creating a challenge or Code test you will see the text \"run hidden levels\" next to the \"Run Code\" button. If you check this you will also see the result for the hidden levels. This option is not available to members taking the Freecode.</p>"},{"location":"create_an_exercise/Images/","title":"Built in images","text":"<p>There are several images that are built in and can be accessed in the same way as they were uploaded by the user.</p>"},{"location":"create_an_exercise/Images/#characters","title":"Characters","text":"Name Image std_ada_matrix.webp std_ada_sitting.webp std_ada_standing.webp std_douglas_sitting.webp std_douglas_standing.webp std_katniss_sitting.webp std_katniss_standing.webp std_rust_matrix.webp std_rust_sitting.webp std_rust_standing.webp std_skilly_sitting.webp std_skilly_standing.webp"},{"location":"create_an_exercise/Images/#objects","title":"Objects","text":"Name Image std_animal_bones_2.webp std_animal_bones.webp std_answer_correct.webp std_answer_incorrect.webp std_arm_chair_grey.webp std_arm_chair_orange.webp std_arm_chair_purple.webp std_arrow_tile.webp std_board_game.webp std_boat_red.webp std_books.webp std_bridge.webp std_bush_2.webp std_bush.webp std_cake_2.webp std_cake_3.webp std_cake_4.webp std_cake_5.webp std_cake_6.webp std_cake.webp std_calculator.webp std_castle.webp std_chair_black.webp std_chair_purple.webp std_chair_red.webp std_check_cross.webp std_check.webp std_chest.webp std_chocolate_white.webp std_chocolate.webp std_circuit.webp std_clothes_basket.webp std_coat_hanger.webp std_coin.webp std_cookie_2.webp std_cookie_3.webp std_cookie_4.webp std_cookie_5.webp std_cookie.webp std_croissant.webp std_cross.webp std_cupboard.webp std_cupcake.webp std_donut.webp std_fridge.webp std_gargoyle.webp std_gingerbread_man.webp std_grass_tile.webp std_gummy_bear.webp std_heart.webp std_hill_frozen.webp std_hill.webp std_house_2.webp std_house_3.webp std_house_4.webp std_house_5.webp std_house_6.webp std_house_7.webp std_house_8.webp std_house_9.webp std_house.webp std_hut.webp std_ice_cream_cone_2.webp std_ice_cream_cone.webp std_ice_cream.webp std_island.webp std_iso_map.webp std_key.webp std_kiln.webp std_lake.webp std_lava_flow.webp std_lava_pool.webp std_light_pole.webp std_lightbulb_off.webp std_lightbulb_on.webp std_lightbulb_outline.webp std_lollipop.webp std_monster.webp std_lollipop_2.webp std_monster_2.webp std_monster_3.webp std_monster_4.webp std_monster_5.webp std_monster_6.webp std_monster_7.webp std_monster_8.webp std_monster_9.webp std_monster_10.webp std_monster_11.webp std_monster_12.webp std_monster_13.webp std_motor_boat_brown.webp std_motor_boat_purple.webp std_motor_boat_red.webp std_octopus.webp std_palm.webp std_palm_2.webp std_palm_3.webp std_pancakes.webp std_pie.webp std_pie_2.webp std_pirate_boat_black.webp std_pirate_boat_red.webp std_pirate_boat_yellow.webp std_pirate_flag.webp std_pirate_flag_2.webp std_plant.webp std_plant_2.webp std_platform_broken.webp std_platform_green.webp std_platform_low.webp std_platform.webp std_pole.webp std_pole_2.webp std_pole_3.webp std_pole_4.webp std_pole_5.webp std_pole_cloth.webp std_poles_cloth.webp std_poles_cloth_2.webp std_poles_frozen.webp std_popsicle_melon.webp std_pretzel.webp std_programming_graph.webp std_rescue_ring.webp std_rope_bridge.webp std_rope_bridge_2.webp std_row_boat_red.webp std_row_boat_turqoise.webp std_row_boat_yellow.webp std_run_button.webp std_shower.webp std_sink_bathroom.webp std_sink_kitchen.webp std_spade.webp std_speaker.webp std_star.webp std_stingray.webp std_stone_2.webp std_stone.webp std_stones_2.webp std_stones.webp std_sweet.webp std_sweet_2.webp std_sweet_3.webp std_sweet_4.webp std_sweet_5.webp std_sweet_6.webp std_sweet_7.webp std_sweet_8.webp std_sweet_9.webp std_sweet_10.webp std_sweet_11.webp std_sweet_12.webp std_switch_off.webp std_table_glass.webp std_table_wood.webp std_tile_rack.webp std_toad.webp std_tree_10.webp std_tree_2.webp std_tree_3.webp std_tree_4.webp std_tree_5.webp std_tree_6.webp std_tree_7.webp std_tree_8.webp std_tree_9.webp std_tree_branch.webp std_tree.webp std_truth_table.webp std_turtle.webp std_tv_set.webp std_village.webp std_washing_machine.webp std_water_world_2.webp std_water_world_3.webp std_water_world_4.webp std_water_world_5.webp std_water_world.webp"},{"location":"create_an_exercise/Images/#combined","title":"Combined","text":"Name Image std_ada_book.webp std_ada_house.webp std_ada_laptop.webp std_ada_meeple.webp std_ada_phone.webp std_ada_puzzle.webp std_ada_queen.webp std_ada_rocket.webp std_ada_soccer_ball.webp std_ada_whiteboard.webp std_douglas_board_game.webp std_douglas_book.webp std_douglas_house.webp std_douglas_laptop.webp std_douglas_meeple.webp std_douglas_puzzle.webp std_douglas_queen.webp std_douglas_rocket.webp std_douglas_soccer_ball.webp std_douglas_whiteboard.webp std_katniss_book.webp std_katniss_eavesdrop.webp std_katniss_house.webp std_katniss_laptop.webp std_katniss_meeple.webp std_katniss_puzzle.webp std_katniss_queen.webp std_katniss_rocket.webp std_katniss_soccer_ball.webp std_katniss_whiteboard.webp std_rust_book.webp std_rust_house.webp std_rust_laptop.webp std_rust_meeple.webp std_rust_phone.webp std_rust_puzzle.webp std_rust_queen.webp std_rust_rocket.webp std_rust_soccer_ball.webp std_rust_whiteboard.webp std_skilly_book.webp std_skilly_house.webp std_skilly_laptop.webp std_skilly_meeple.webp std_skilly_puzzle.webp std_skilly_queen.webp std_skilly_rocket.webp std_skilly_soccer_ball.webp std_skilly_whiteboard.webp"},{"location":"create_an_exercise/Skeletons/","title":"Skeletons","text":"<p>This article goes through how to use the skeleton classes to write implementations. This is the preferred way of creating new exercises, challenges, etc.</p> <p>The article contains both a broad overview of the material as well as deep dives, it is recommended to start reading the broad sections and come back to the sub-sections as questions arise.</p>"},{"location":"create_an_exercise/Skeletons/#why-and-how-to-use","title":"Why and how to use","text":"<p>The skeletons are base classes that handles things that most implementations will need or things that are required. The specialized skeletons also provides a bunch of functionality that otherwise would take a lot of work to implement.</p> <p>The provided skeletons form a hierarchy where the children inherit functionality from the parent skeletons:</p> <ul> <li><code>BasicChallenge</code> - Provides the most common functionality<ul> <li><code>StageChallenge</code> - Provides a GUI structure and a couple other features<ul> <li><code>GameChallenge</code> - Provides a bunch of features realated to making a turn-based game</li> </ul> </li> </ul> </li> </ul> <p>To use a skeleton the <code>Challenge</code> class should inherit from the skeleton class. Each skeleton has a number of required methods that need to be implemented. We provide a basic template for each skeleton under respective heading, which are good starting points for creating a challange.</p>"},{"location":"create_an_exercise/Skeletons/#basicchallenge","title":"<code>BasicChallenge</code>","text":"<p>This is the base of all the skeletons and provide the essential functionality, which will be used by all other skeletons as well. However, keep in mind that some skeletons do implement some of the <code>BasicChallenge</code> methods for you.</p> Template for <code>BasicChallange</code> <pre><code>\"\"\"\nThis is the module containing the challenge implementation.\n\"\"\"\nfrom lib.exceptions import SolutionException\nfrom lib.skeletons import BasicChallenge, LevelInfo\nfrom lib.ui import Rectangle, Text\n\n\nclass Challenge(BasicChallenge):\n    \"\"\"\n    This is a challenge implementation using the basic skeleton.\n    \"\"\"\n\n    def setup_level(self, level):\n        \"\"\"\n        This method returns required level information for the current level.\n        The \"level\" parameter is the level index, starting at 0.\n        \"\"\"\n        return LevelInfo(name=f\"Level {level + 1}\", max_score=10)\n\n    def setup_state(self):\n        \"\"\"\n        This method is where you should do all initial setup, except for graphics.\n        \"\"\"\n        # For example, setting up a variable which can be used later on\n        self.my_variable = 5\n        # Or writing a message in the console\n        self.console.log(\"Hi console!\")\n\n    def setup_canvas(self):\n        \"\"\"\n        This method is where you should create the initial graphics.\n        \"\"\"\n        # For example, creating a square\n        self.my_square = Rectangle(w=20, h=20, x=20, y=20, color=\"green\", parent=self.canvas)\n        # And putting text inside it\n        self.my_text = Text(\"N\", font_size=10, color=\"white\", parent=self.my_square)\n\n    def update_state(self):\n        \"\"\"\n        This method is where you should call solutions and update the current state.\n        It is called continuously until \"self.finished\" is set to \"True\".\n        \"\"\"\n        # When calling a solution you need to handle any \"SolutionException\"\n        try:\n            solution = self.context.solutions[0]\n            # TODO: call a solution method\n        except SolutionException:\n            # Code put here will run if the solution crashed\n            pass\n\n        # This is a good place to update the scores\n        self.scores[0] = self.my_variable\n\n        # You will want to set this conditionally if your challenge involves multiple step\n        self.finished = True\n\n    def update_canvas(self):\n        \"\"\"\n        This method is where you should update the graphics based on the current state.\n        \"\"\"\n        # For example, changing the text inside the square\n        self.my_text.text = str(self.my_variable)\n</code></pre>"},{"location":"create_an_exercise/Skeletons/#required-methods","title":"Required methods","text":"<code>setup_level(self, level)</code> Must return a <code>LevelInfo</code> object which includes the information needed for the framework to handle the level. The <code>level</code> parameter is the index of the current level, starting at 0. The <code>LevelInfo</code> object has the following attributes: <ul> <li><code>name</code> - The name of the level</li> </ul> <ul> <li><code>max_score</code> - The maximum possible score for a solution</li> </ul> <ul> <li><code>show_canvas</code> - Whether the level uses the canvas, defaults to <code>True</code></li> </ul> <code>setup_state(self)</code> Setup the challenge state here. Will be called once at startup, after <code>setup_level</code>. <code>setup_canvas(self)</code> Setup the canvas here. Will be called once at startup, after <code>setup_state</code>, unless <code>show_canvas</code> is <code>False</code>. <p>Note</p> This method is implemented by most of the other skeletons, so do not add your own when using those. <code>update_state(self)</code> Call solutions and update the challenge state here. When calling solutions you must catch any <code>SolutionException</code>s that are raised. Will continuously be called until <code>self.finished</code> is set to <code>True</code>, so remember to do that. <p>Note</p> Once <code>self.finished</code> is set to <code>True</code> no other method is called, so remember to also update the scores. <code>update_canvas(self)</code> Make any changes to the canvas here. Will be called immediately after <code>update_state</code>, unless <code>show_canvas</code> is <code>False</code>. <p>Note</p> This method is implemented by most of the other skeletons, so do not add your own when using those. Flowchart for <code>BasicChallenge</code> <pre><code>---\nconfig:\n    look: handDrawn\n---\ngraph TB\n    START([START]) --&gt; A[setup_level];\n    A --&gt; B[setup_state];\n    B --&gt; IF_1{show_canvas};\n    IF_1 --&gt; |True| C[setup_canvas];\n    C --&gt; D[update_state];\n    IF_1 --&gt; |False| D;\n    D --&gt; IF_2{self.finished};\n    IF_2 ---&gt; |True| END([END]);\n    IF_2 --&gt; |False| IF_3{show_canvas};\n    IF_3 --&gt; |True| E[update_canvas];\n    E --&gt; D;\n    IF_3 --&gt; |False| D;</code></pre>"},{"location":"create_an_exercise/Skeletons/#features","title":"Features","text":"<p>The main feature of this skeleton is reduced boilerplate and some minor conveniences. Here is a list of class members and what they are used for:</p> <code>finished</code> A boolean that should be set to <code>True</code> when the challenge has ended. <code>scores</code> A list of scores for each solution, indices match the solution indices. Scores start at 0 and must be updated manually. <code>canvas</code> Represents the canvas itself and is the top of the graphical hierarchy. <code>console</code> Represents the console, and can be used to log messages. <code>context</code> Used to access various features: <code>level</code> The current level <code>canvas</code> An object that is used to interact with the canvas It is used to add new graphical elements, more details on them are covered in UI. It is best practice to only modify the <code>canvas</code> in dedicated setup and update methods, by default <code>setup/update_canvas/view</code> <code>console</code> An object that can be used to interact with the console. It is no longer needed, as the standard <code>print</code> statement can be used instead. <code>solutions</code> A list of the <code>solution</code> objects corresponding to the coders partaking in the challenge/exercise/freecode together for this level. This list will always be the same length as the number of solutions, but all values will be set to <code>None</code> during <code>setup_canvas/view</code>, the proper values will be found in the <code>update_</code> methods. The <code>solution</code> objects contain the following: <code>name</code> The name of the solution, this will either be the player name or a placeholder string. <code>index</code> The index of the solution. <code>console</code> An individual console for the solution. Use the <code>log</code> and <code>debug</code> methods to print messages in the corresponding player's console. <code>alive</code> A flag indicating if the solution is still running or has crashed/timed out. <code>parallel</code> An object that acts as a proxy <code>solution</code> for making parallel <code>solution</code> calls. <code>parallel</code> will be explained further in Making parallel <code>solution</code> calls. <code>session</code> Used for interact mode, see Interact mode. <code>settings</code> Used for interact mode, see Interact mode."},{"location":"create_an_exercise/Skeletons/#making-parallel-solution-calls","title":"Making parallel <code>solution</code> calls","text":"<p>To call solutions in parallel the <code>context.parallel</code> object should be used instead of the <code>solution</code> objects.</p> <p>The results of a parallel call is a dictionary with <code>solution</code> indices as keys and the <code>solution</code> results as value. There is no need to catch <code>SolutionException</code> when making parallel calls. Only <code>solutions</code> that lived before making the call are included in the dictionary. The solution result is either the return value from the player's code, or a <code>SolutionException</code> if the player's code crashed, therefore it is necessary to make an <code>isinstance</code> check on the result if the return value is used.</p>"},{"location":"create_an_exercise/Skeletons/#interact-mode","title":"Interact mode","text":"<p>Interact mode is an advanced feature that is used to make challenges with interactive canvases. This skeleton has a couple of conveniences related to interact mode.</p> <p>The <code>session</code> class member is used to store the state of the current interact session, which can be used to restart the session in case it timed out or was paused. It acts as a dictionary and the values must consist of only basic python types. The exact data representation is not guaranteed to be retained, and notably any integer dictionary keys will be converted into strings.</p> <p>The <code>settings</code> class member act just like <code>session</code> but is persisted over interact sessions. So you can use it to store user settings or whether to show a help popup.</p> <p>Both of these support callbacks on changes using <code>.register_callback(id, key, callback)</code> where <code>id</code> should be unique, <code>key</code> is the settings key, and <code>callback</code> should be a function that takes one argument (the new value). A callback can be removed using <code>.deregister_callback(id, key)</code>.</p> <p>Note</p> <p>Some of the other skeletons might use these features in order to persist settings or state. Therefore you should expect the possibility of unknown keys and values. However, those keys will always be prefixed with two \"_\" to avoid clashes.</p> <p>These features use the <code>interact_session_state</code> and <code>interact_setting_state</code> to store the values, so make sure that you are not using those directly as well.</p> <code>interact_session_state</code> An object to store the session state of the challenge in interact mode to activate the resume interact after stopping interact mode, either manually or after a timeout. It can be filled by any type including string, array, dictionary, etc., and then you can access it as the same type. The default value is None at first and it will again be set to None if the user restarts the interact or if the challenge is marked as finished. The interact_session_state also will automatically be set to None if the user leaves the page or refreshes the browser tab. Set Sample Value to interact_session_state <pre><code>self._context.interact_session_state = [(l,0), (1,1), (0,1), (-1,1)]\n</code></pre> <p>Note: Remember to check the value of interact_session_state in the init function of the challenge class to initial the challenge based on the previous session state stored before and resume the interact mode to that state.</p> <code>interact_setting_state</code> An object to store the seUing state like the user setting for the challenge in interact mode. It will be saved in the local storage of the users' browser, and it will retrieve in future interact sessions as well. Same as the interact_session_state, the interact setting state can be used in any type including string, array, dictionary, etc. Set Sample Value to interact_setting_state <pre><code>self._context.interact_setting_state = {\"show_possible_moves\":True}\n</code></pre> <p>Note: Remember to check the value of interact_setting_state in the init function of the challenge class to initialize the challenge based on the previous user setting state stored before.</p>"},{"location":"create_an_exercise/Skeletons/#stagechallenge","title":"<code>StageChallenge</code>","text":"<p>This skeleton adds a GUI setup called the stage on top of the basic skeleton, and some related functionality. It acts as the base for other GUI focused skeletons, so it is likely you will want to use one of them instead.</p> Template for <code>StageChallenge</code> <pre><code>\"\"\"\nThis is the module containing the challenge implementation.\n\"\"\"\nfrom lib.exceptions import SolutionException\nfrom lib.skeletons import LevelInfo, StageChallenge\nfrom lib.ui import Rectangle, Text\n\n\nclass Challenge(StageChallenge):\n    \"\"\"\n    This is a challenge implementation using the stage skeleton.\n    \"\"\"\n\n    def setup_level(self, level):\n        \"\"\"\n        This method returns required level information for the current level.\n        The \"level\" parameter is the level index, starting at 0.\n        \"\"\"\n        return LevelInfo(name=f\"Level {level + 1}\", max_score=10)\n\n    def setup_state(self):\n        \"\"\"\n        This method is where you should do all initial setup, except for graphics.\n        \"\"\"\n        # For example, setting up a variable which can be used later on\n        self.my_variable = 5\n        # Or writing a message in the console\n        self.console.log(\"Hi console!\")\n        # Or writing a messege in the stage log\n        self.add_log_entry(\"Hi log!\")\n\n    def setup_view(self):\n        \"\"\"\n        This method returns the main view for the challenge, which can be any graphics element.\n        \"\"\"\n        # The view will automatically be attached, resized and positioned by the framework\n        self.my_view = Rectangle(color=\"green\")\n        # Any elements put inside the view will be centered inside they view\n        self.my_text = Text(\"N\", font_size=50, color=\"white\", parent=self.my_view)\n        return self.my_view\n\n    def update_state(self):\n        \"\"\"\n        This method is where you should call solutions and update the current state.\n        It is called continuously until \"self.finished\" is set to \"True\".\n        \"\"\"\n        # When calling a solution you need to handle any \"SolutionException\"\n        try:\n            solution = self.context.solutions[0]\n            # TODO: call a solution method\n        except SolutionException:\n            # Code put here will run if the solution crashed\n            pass\n\n        # This is a good place to update the scores\n        self.scores[0] = self.my_variable\n\n        # You will want to set this conditionally if your challenge involves multiple steps\n        self.finished = True\n\n    def update_view(self):\n        \"\"\"\n        This method is where you should update the view based on the current state.\n        \"\"\"\n        # For example, changing the text inside the view\n        self.my_text.text = str(self.my_variable)\n</code></pre>"},{"location":"create_an_exercise/Skeletons/#stagechallenge-required-methods","title":"Required methods","text":"<code>setup_level(self, level)</code> See <code>BasicChallenge</code> - Required methods. <code>setup_state(self)</code> See <code>BasicChallenge</code> - Required methods. <code>setup_view(self)</code> Must return a graphics element which will comprise the main view of the challenge. It is automatically given a parent, size and position on the canvas. Will be called once at startup, after <code>setup_state</code>, unless <code>show_canvas</code> is <code>False</code>. <code>update_state(self)</code> See <code>BasicChallenge</code> - Required methods. <code>update_view(self)</code> Make any changes to the view here. Will be called immediately after <code>update_state</code>, unless <code>show_canvas</code> is <code>False</code>."},{"location":"create_an_exercise/Skeletons/#optional-methods","title":"Optional methods","text":"<code>setup_info_panel(self)</code> Similar to <code>setup_view</code> but should return an element to put on the left-hand side of the main view. There is no equivalent to <code>update_view</code>, so any needed updates should be put there. <code>setup_description(self)</code> Should return a text string that will be put in a \"Description\" tab. This text can contain html formatting, including images. <code>setup_settings(self)</code> Used for interact mode, see Interact mode - Settings. <code>setup_center_buttons(self)</code> Used for interact mode, see Interact mode - Toolbar. <code>setup_right_buttons(self)</code> Used for interact mode, see Interact mode - Toolbar. Flowchart for <code>StageChallenge</code> <pre><code>---\nconfig:\n    look: handDrawn\n---\ngraph TB\n    START([START]) --&gt; A[setup_level];\n    A --&gt; B[setup_state];\n    B --&gt; IF_1{show_canvas};\n    IF_1 --&gt; |True| C[setup_view];\n    C --&gt; SA[setup_info_panel];\n    subgraph NEW\n    SA --&gt; SB[setup_description];\n    SB --&gt; SC[setup_center_buttons];\n    SC --&gt; SD[setup_right_buttons];\n    end\n    SD --&gt; D[update_state];\n    IF_1 --&gt; |False| D;\n    D --&gt; IF_2{self.finished};\n    IF_2 ---&gt; |True| END([END]);\n    IF_2 --&gt; |False| IF_3{show_canvas};\n    IF_3 --&gt; |True| E[update_view];\n    E --&gt; D;\n    IF_3 --&gt; |False| D;</code></pre>"},{"location":"create_an_exercise/Skeletons/#features_1","title":"Features","text":"<p>The <code>StageChallenge</code> class has the same features as the <code>BasicChallenge</code> in addition to some new features.</p> <p>The main additional feature of this skeleton is the GUI setup with a main view and various optional features. Many features are related to interact mode, and are covered in their own subsection.</p> <p>Additional features include:</p> <ul> <li>Info panel on the left-hand side of the main view, see Optional methods.</li> <li>A GUI log which can be written to using <code>self.add_log_entry</code>.</li> <li>A description tab with support for html formatting, see Optional methods.</li> <li>A GUI settings system, see Interact mode - Settings.</li> <li>A toolbar at the bottom of the canvas, see Interact mode - Toolbar.</li> </ul>"},{"location":"create_an_exercise/Skeletons/#interact-mode_1","title":"Interact mode","text":"<p>This skeleton provides several useful features for interact mode, some that work on top of the basic skeleton features.</p>"},{"location":"create_an_exercise/Skeletons/#settings","title":"Settings","text":"<p>This skeleton extends the settings system from the basic skeleton with GUI checkboxes in a new \"Settings\" tab to the right.</p> <p>To add a setting here you need to add a <code>SettingInfo</code> object for it in the list returned by <code>setup_settings</code>. The <code>SettingInfo</code> object has the following attributes:</p> <ul> <li><code>key</code> - The key for the setting (same as used in basic skeleton)</li> <li><code>label</code> - Text next to the checkbox</li> <li><code>category</code> - Settings category, used for grouping settings</li> <li><code>default</code> - The default value (defaults to <code>False</code>)</li> </ul> Example of setting up and using settings <pre><code>def setup_settings(self):\n    return [SettingInfo(key=\"my_setting\", label=\"My Setting\", category=\"Example\")]\n\ndef update_view(self):\n    if self.settings.get(\"my_setting\"):\n        self.my_text.text = str(self.my_variable)\n    else:\n        self.my_text.text = \"?\"\n</code></pre>"},{"location":"create_an_exercise/Skeletons/#toolbar","title":"Toolbar","text":"<p>When in interact mode a toolbar will appear at the bottom of the stage. This toolbar comes with an info prompt as well as the possibility to add buttons in the center and to the right.</p> <p>The info prompt can be updated by setting the <code>self.info_prompt</code> attribute (which defaults to empty).</p> <p>Buttons can be added by returning a list of buttons in either <code>setup_center_buttons</code> or <code>setup_right_buttons</code>.  These buttons will be sized and positioned appropriately, but you will have to attach behaviour yourself.</p> Example of setting up buttons and using the info prompt <pre><code>def setup_center_buttons(self):\n    return [Button(\"Center\", on_click=lambda _: setattr(self, \"info_prompt\", \"Center clicked\"))]\n\ndef setup_right_buttons(self):\n    return [Button(\"Right\", on_click=lambda _: setattr(self, \"info_prompt\", \"Right clicked\"))]\n\ndef setup_state(self):\n    self.info_prompt = \"Click a button\"\n</code></pre>"},{"location":"create_an_exercise/Skeletons/#gamechallenge","title":"<code>GameChallenge</code>","text":"<p>This skeleton adds a bunch of nice features useful when creating games (or other challenges where solutions take turns). It makes extensive use of the stage skeleton features, so only implement methods also mentioned here. Like the stage skeleton, there are plenty of features specifically for interact mode.</p> Template for <code>GameChallenge</code> <pre><code>\"\"\"\nThis is the module containing the challenge implementation.\n\"\"\"\nfrom lib.exceptions import SolutionException\nfrom lib.skeletons import LevelInfo, GameChallenge, GameInfo, PlayerInfo\nfrom lib.ui import Rectangle, Text\n\n\nclass Challenge(GameChallenge):\n    \"\"\"\n    This is a challenge implementation using the game skeleton.\n    \"\"\"\n\n    def setup_game(self):\n        \"\"\"\n        This method returns required game information for setting up the challenge.\n        \"\"\"\n        return GameInfo(\n            title=\"My game\",\n            summary=\"My game summary\",\n            description=\"My game description. Which can use &lt;em&gt;html formatting&lt;/em&gt;!\",\n        )\n\n    def setup_players(self):\n        \"\"\"\n        This method returns a list with required information for each player.\n        \"\"\"\n        return [PlayerInfo(\n            role=\"Player\",\n            name=\"Your solution\",\n            image=\"ui_general_null.webp\",\n        )]\n\n    def setup_level(self, level):\n        \"\"\"\n        This method returns required level information for the current level.\n        The \"level\" parameter is the level index, starting at 0.\n        \"\"\"\n        return LevelInfo(name=f\"Level {level + 1}\", max_score=10)\n\n    def setup_state(self):\n        \"\"\"\n        This method is where you should do all initial setup, except for graphics.\n        \"\"\"\n        # For example, setting up a variable which can be used later on\n        self.my_variable = 5\n        # Or writing a message in the console\n        self.console.log(\"Hi console!\")\n        # Or writing a messege in the stage log\n        self.add_log_entry(\"Hi log!\")\n        # Or writing a log message associated with a player (use player index starting at 0)\n        self.add_player_log_entry(0, \"Hi player!\")\n\n    def setup_view(self):\n        \"\"\"\n        This method returns the main view for the challenge, which can be any graphics element.\n        \"\"\"\n        # The view will automatically be attached, resized and positioned by the framework\n        self.my_view = Rectangle(color=\"green\")\n        # Any elements put inside the view will be centered inside they view\n        self.my_text = Text(\"N\", font_size=50, color=\"white\", parent=self.my_view)\n        return self.my_view\n\n    def update_state(self):\n        \"\"\"\n        This method is where you should call solutions and update the current state.\n        It is called continuously until \"self.finished\" is set to \"True\".\n        \"\"\"\n        # When calling a solution you need to handle any \"SolutionException\"\n        try:\n            solution = self.context.solutions[0]\n            # TODO: call a solution method\n        except SolutionException:\n            # Code put here will run if the solution crashed\n            pass\n\n        # This is a good place to update the scores\n        self.scores[0] = self.my_variable\n\n        # You will want to set this conditionally if your challenge involves multiple steps\n        self.finished = True\n\n    def update_view(self):\n        \"\"\"\n        This method is where you should update the view based on the current state.\n        \"\"\"\n        # For example, changing the text inside the view\n        self.my_text.text = str(self.my_variable)\n</code></pre>"},{"location":"create_an_exercise/Skeletons/#required-methods_1","title":"Required methods","text":"<code>setup_game(self)</code> Must return a <code>GameInfo</code> object which includes the information needed for the framework to handle the game. It has the following attributes (all optional): <ul> <li><code>title</code> - The title of the game</li> </ul> <ul> <li><code>summary</code> - A short summary of the game</li> </ul> <ul> <li><code>description</code> - A longer description of the game, which can include html formatting including images</li> </ul> <ul> <li><code>step_mode</code> - See dedicated subsection of the features section.</li> </ul> <code>setup_players(self)</code> Must return a list of <code>PlayerInfo</code> objects including the information needed for the framework to handle players. Typically the player list will correspond with the solution list, but there might be reasons to have more or fewer players in a challenge. The <code>PlayerInfo</code> object has the following attributes: <ul> <li><code>role</code> - The role of the player, will be displayed above the name</li> </ul> <ul> <li><code>name</code> - The name of the player</li> </ul> <ul> <li><code>image</code> - The name of the image to use for the player, will be shown in the player list and the log</li> </ul> <code>setup_level(self, level)</code> See <code>BasicChallenge</code> - Required methods. <code>setup_state(self)</code> See <code>BasicChallenge</code> - Required methods. <code>setup_view(self)</code> See <code>StageChallenge</code> - Required methods. <code>update_state(self)</code> See <code>BasicChallenge</code> - Required methods. <code>update_view(self)</code> See <code>StageChallenge</code> - Required methods."},{"location":"create_an_exercise/Skeletons/#optional-methods_1","title":"Optional methods","text":"<code>setup_statistics(self)</code> See Statistics. <code>setup_settings(self)</code> See <code>StageChallenge</code> - Optional methods. <p>Note</p> You need to include the settings from <code>super().setup_settings()</code>. <code>setup_center_buttons(self)</code> See <code>StageChallenge</code> - Optional methods. <code>step_mode_check(self)</code> See Interact mode - Turn management. <code>resign(self)</code> Used for interact mode, see Interact mode - Toolbar. Flowchart for <code>GameChallenge</code> <pre><code>---\nconfig:\n    look: handDrawn\n---\ngraph TB\n    START([START]) --&gt; GA[setup_game];\n    subgraph NEW\n    GA --&gt; GB[setup_players];\n    GB --&gt; GC[setup_statistics];\n    end\n    GC --&gt; A[setup_level];\n    A --&gt; B[setup_state];\n    B --&gt; IF_1{show_canvas};\n    IF_1 --&gt; |True| C[setup_view];\n    C --&gt; SA[setup_info_panel];\n    SA --&gt; SB[setup_description];\n    SB --&gt; SC[setup_center_buttons];\n    SC --&gt; SD[setup_right_buttons];\n    SD --&gt; D[update_state];\n    IF_1 --&gt; |False| D;\n    D --&gt; IF_2{self.finished};\n    IF_2 ---&gt; |True| END([END]);\n    IF_2 --&gt; |False| IF_3{show_canvas};\n    IF_3 --&gt; |True| E[update_view];\n    E --&gt; D;\n    IF_3 --&gt; |False| D;</code></pre>"},{"location":"create_an_exercise/Skeletons/#features_2","title":"Features","text":"<p>This skeleton adds a number of GUI features on top of the stage UI from the <code>StageChallenge</code> skeleton, as well as some core features for creating games. Most features are detailed in their own subsection.</p>"},{"location":"create_an_exercise/Skeletons/#players","title":"Players","text":"<p>The main addition of this skeleton is the concept of players, which usually correspond to the solutions. The information provided in <code>setup_players</code> will be displayed in the new left-hand side information panel, together with a game summary.</p> <p>There might be reasons to have a different number of players than solutions, but normally only in interact mode.</p>"},{"location":"create_an_exercise/Skeletons/#statistics","title":"Statistics","text":"<p>The skeleton includes a system for tracking statistics for each player during a game. These statistics will be shown in the player panel under the players name.</p> <p>To setup a statistic you will include a <code>StatisticInfo</code> object in <code>setup_statistics</code> with the following attributes:</p> <ul> <li><code>name</code> - The name of the statistic (required), should be a valid python identifier</li> <li><code>suffix</code> - A suffix to append in the player panel (defaults to empty)</li> <li><code>type</code> - The type of the statistic (defaults to <code>float</code>), use <code>int</code> for integers or <code>str</code> for strings</li> <li><code>default</code> - The initial value for the statistic (defaults to 0)</li> </ul> <p>To get or set a statistic for a player you can use <code>self.players[i].name</code> where <code>i</code> is the player index and <code>name</code> is the statistic. For example, setting the \"points\" statistic for the first player: <code>self.players[0].points = 42</code>.</p>"},{"location":"create_an_exercise/Skeletons/#interact-mode_2","title":"Interact mode","text":"<p>This skeleton adds a complete turn-management system which greatly simplifies interaction for games.</p>"},{"location":"create_an_exercise/Skeletons/#gamechallenge-toolbar","title":"Toolbar","text":"<p>This skeleton utilizes the toolbar introduced with the stage skeleton by adding buttons on the right-hand side. You should add any custom buttons to the center of the toolbar.</p> <p>The added button are \"Resign\" (with a confirmation popup) and \"Finish turn\" (see following sections). The <code>resign(self)</code> method can be overridden to implement specific behaviour for resignation.</p>"},{"location":"create_an_exercise/Skeletons/#turn-management","title":"Turn management","text":"<p>A main feature of this skeleton is the turn management system which makes it easier to handle user input and turn logic. This consists of a few attributes, methods and GUI elements.</p> <p>When using this system there are two things to remember in a user input callback:</p> <ol> <li>Make sure that <code>self.turn_complete</code> has the correct value (should be <code>True</code> if the turn can be finished)</li> <li>Make sure to end the callback by calling <code>self.finish_input()</code>.</li> </ol> <p>This ensures that the \"Finish turn\" button is enabled when it should be and that the auto-complete turn feature will work correctly.</p> <p>This skeleton comes with a pre-made setting called \"Auto-finish turn\" which will automatically finish the turn once it is complete, otherwise the user needs to press the \"Finish turn\" button manually.</p> <p>When the turn is finished (manually or automatically) the system will perform a number of \"steps\" according to the <code>step_mode</code> (see <code>GameInfo</code>). Each step consists of a call to <code>update_state</code> and <code>update_view</code> (if <code>show_canvas</code> is <code>True</code>). The following step modes exists:</p> <code>StepMode.ROUND</code> Will step exactly once. Use if your update method always goes through all solutions. <code>StepMode.PLAYER</code> Will step once for each player (the default). Use if your update method handles just one solution each time. <p>Note</p> <code>StepMode.PLAYER</code> matches number of players and not solutions, in case the count is not the same. <code>StepMode.CUSTOM</code> Will use the method <code>step_mode_check(self)</code> to check how many times to step. After each step the method is called, and if <code>True</code> is returned another step is performed. Use if the number of steps may vary (e.g. being able to miss a turn). <p>Note</p> Each time at least one step is performed."},{"location":"create_an_exercise/Skeletons/#examples","title":"Examples","text":"<p>For a complete example of a Tournament Freecode which uses the GameChallenge, check out one of these (you have to be logged in to view the implementations):</p> <ul> <li>Reversi</li> <li>Widescreen - how to remove parts of a GameChallenge</li> </ul>"},{"location":"create_an_exercise/UI/","title":"UI","text":"<p>The UI section controls how the exercise appears to the user. It allows you to define a custom interface, provide instructions, show hints or graphics, and handle interactions through a canvas.</p>"},{"location":"create_an_exercise/UI/#how-to-use-the-canvas","title":"How to use the canvas","text":"<p>Depending on what skeleton you are using, the way you add your graphics to the canvas differs. The templates for either skeleton will include an example of using the canvas.</p> <p>If you use <code>BasicChallenge</code> (or no skeleton) you will want to manually add the elements to the canvas, like so:</p> Manually adding elements to canvas <pre><code>def setup_canvas(self):\n    self.my_rectangle = Rectangle(x=10, y=10, color=\"green\", parent=self.canvas)\n</code></pre> <p>If you use <code>StageChallenge</code> or <code>GameChallenge</code> you will want to return the element in the <code>setup_view</code> method:</p> Implicitly adding element to canvas <pre><code>def setup_view(self):\n    self.my_rectangle = Rectangle(color=\"green\")\n    return self.my_rectangle\n</code></pre> <p>Note</p> <p>You specify neither parent nor position in <code>setup_view</code>, this is done for you.</p> <p>Either way you will get a canvas containing only a green square.</p> <p></p>"},{"location":"create_an_exercise/UI/#overview","title":"Overview","text":"<p>The UI library is object oriented, meaning that the graphical elements are represented by Python objects. You create a new element by creating a new object and you can modify the elements by modifying the objects. An element will not show up on the canvas unless the object has the canvas as a parent (or grandparent, or great grandparent, and so on).</p> <p>A child element will inherit some of the attributes from it's parent. They will be positioned relative to the parent, scaled according to the parent, and opacity of the parent is applied. A child with opacity of <code>0.5</code> and with a parent with opacity of <code>0.5</code> will in effect have an opacity of <code>0.25</code>.</p> <p>When creating an element object, you can (and sometimes must) include a number of attributes. You can use any of the names listed here, e.g. <code>width</code> or <code>w</code> or <code>size_x</code>. The same names can be used to get or modify the attributes later on.</p> Accessing attributes <pre><code>my_rect = Rectangle(w=8, h=6, x=10, y=12, parent=self.canvas)\nmy_rect.width = 4\nmy_rect.color = \"blue\"\n</code></pre> <p>All elements can have a parent, and some can have children. If an element switches parent it will be removed from the previous parent's list of children. You can either use the <code>parent</code> attribute or the <code>.add_child(child)</code>/<code>.remove_child(child)</code> methods to update the hierarchy. But remember that for an element to show up in the canvas it needs to have it as an ancestor.</p> <p>The following section and subsections will detail the different elements available in the UI library, grouped by similarities. Many elements have common attributes, which are detailed in their own section to make things cleaner.</p>"},{"location":"create_an_exercise/UI/#elements","title":"Elements","text":"<p>All these elements can be imported from the <code>lib.ui</code> package, along with any of the enums and constants listed here.</p> Importing and using an element <p><pre><code>from lib.ui import Rectangle, Text\n\nmy_rect = Rectangle(children=[Text(\"Hello\", color=\"white\", font_size=30)])\n</code></pre> </p> <p>Remember to add the element to the import list, or you will get an error.</p> <p>All elements extend either the <code>BaseElement</code> or <code>ContainerElement</code> base class which provides the <code>common</code> and <code>container</code> attributes and methods.</p>"},{"location":"create_an_exercise/UI/#shapes","title":"Shapes","text":"<p>These elements are used to make geometric shapes, either filled or outlines. Use <code>Polygon</code> to make additional shapes such as triangles and hexagons. For more complex shapes, consider using images instead.</p>"},{"location":"create_an_exercise/UI/#rectangle","title":"<code>Rectangle</code>","text":"<p>Used to make squares, rectangles and rounded rectangles.</p> <p>General attributes/methods: <code>common</code>, <code>container</code>, <code>shape</code>, <code>action</code>, <code>click</code>, <code>drag</code>, <code>keyboard</code></p> <code>corner_radius</code> - <code>float | None</code> S Add rounded corners to the rectangle Creating three <code>Rectangle</code> objects <p><pre><code>self.my_rectangle = Rectangle(color=\"white\", children = [\n\n    # Wide rectangle\n    Rectangle(w=4, h=2, x=0, y=0, color=\"#FF6347\"),\n\n    # Rounded rectangle\n    Rectangle(w=3, h=1, x=1, y=1, color=\"blue\", corners_radius=1),\n\n    # Rotated square\n    Rectangle(w=2, h=2, x=-1, y=-1, color=\"red\", rotation=60),\n\n    # Hollow square\n    Rectangle(w=2, h=2, x=0, y=0, color=\"green\", rotation=-20, stroke=0.2, opacity=0.3)\n])\n</code></pre> </p>"},{"location":"create_an_exercise/UI/#circle","title":"<code>Circle</code>","text":"<p>Used to make circles.</p> <p>General attributes/methods: <code>common</code>, <code>container</code>, <code>shape</code>, <code>action</code>, <code>click</code>, <code>drag</code>, <code>keyboard</code></p> <code>radius</code>/<code>r</code> - <code>float</code> S The radius of the circle, use instead of <code>width</code>/<code>height</code> <code>min_radius</code>/<code>min_r</code> - <code>float</code> The minimum radius for this element, does not affect the current radius <code>max_radius</code>/<code>max_r</code> - <code>float</code> The maximum radius for this element, does not affect the current radius <code>fixed_radius</code> - <code>bool</code> Prevents automatic resizing of the circle Creating three <code>Circle</code> objects <p><pre><code>self.my_rectangle = Rectangle(color=\"white\", children = [\n\n    # Red circle\n    Circle(r=1, color=\"red\", x=-1),\n\n    # Blue circle\n    Circle(r=1, color=\"blue\", x=1, y=1),\n\n    # Green ring\n    Circle(r=0.8, color=\"green\", x=0, y=1, stroke=0.1)\n])\n</code></pre> </p>"},{"location":"create_an_exercise/UI/#polygon","title":"<code>Polygon</code>","text":"<p>Used to make any other straight edge shapes. Consider using images if you need a large number of points.</p> <p>General attributes/methods: <code>common</code>, <code>container</code>, <code>shape</code>, <code>action</code>, <code>click</code>, <code>drag</code>, <code>keyboard</code></p> <code>points</code> - <code>list[tuple[float, float]]</code> R A list of points to use to draw the polygon, required and positional <code>bounds</code> - <code>tuple[tuple[float, float], tuple[float, float]]</code> S The bounds of the polygon used to determine size and pivot, calculated if omitted Creating three <code>Polygon</code> objects <p><pre><code>self.my_rectangle = Rectangle(color=\"white\", children = [\n    # Red triangle\n    Polygon([(0, 0), (5, 0), (2, 1)], color=\"red\", x=0.4, y=0, z_index = 1),\n\n    # Blue line\n    Polygon([(0, 0), (0, 2), (0.5, 2), (1, 1), (2, 2), (1, 0)], color=\"blue\", x=-1.5, y=0, stroke=0.3, z_index=3),\n\n    # Green quadrilateral\n    Polygon([(0, 0), (-2, 2), (2, 2), (3, 0)], color=\"green\", x=0, y=0, opacity=0.5, rotation=170, z_index=2)\n])\n</code></pre> </p>"},{"location":"create_an_exercise/UI/#complexshape","title":"<code>ComplexShape</code>","text":"<p>Used to make a shape with straight or B\u00e9zier curves. Consider using images if you need very complex shapes or a large number of points.</p> <p>General attributes/methods: <code>common</code>, <code>container</code>, <code>shape</code>, <code>action</code>, <code>click</code>, <code>drag</code>, <code>keyboard</code></p> <code>segments</code> - <code>list[list[tuple[float, float]]]</code> R A list of segments (list of points) to use to draw the shape, required and positional Each segment must consist of one to three points (first must be one point): <ul> <li>Single point means a straight line to that point</li> </ul> <ul> <li>Two points is a quadratic B\u00e9zier curve with a control point (first) and an end point (second)</li> </ul> <ul> <li>Three points is a cubic B\u00e9zier curve with two control points and an end point (last)</li> </ul> <code>bounds</code> - <code>tuple[tuple[float, float], tuple[float, float]]</code> S The bounds of the shape used to determine size and pivot, calculated if omitted <code>closed</code> - <code>bool</code> S Whether the shape should be closed or not Creating a <code>ComplexShape</code> <p><pre><code>self.my_rectangle = Rectangle(color=\"white\", children = [\n    ComplexShape([[(0, 0)], [(5, 5), (0, 10)], [(10, 10)], [(5, 5), (15, 5), (10, 0)], [(0, 0)], [(5, 5), (0, 10)], [(10, 10)], [(5, 5), (15, 5), (10, 0)]], color=\"green\")\n])\n</code></pre> </p>"},{"location":"create_an_exercise/UI/#text","title":"Text","text":"<p>These elements can be used to display text.</p>"},{"location":"create_an_exercise/UI/#text_1","title":"<code>Text</code>","text":"<p>Simple text element. The size is based on the text string and font size.</p> <p>General attributes/methods: <code>common</code>, <code>action</code>, <code>click</code>, <code>drag</code>, <code>keyboard</code></p> <code>text</code> - <code>str</code> The text to display, required and positional <code>color</code> - <code>str</code> The text color <code>font_size</code> - <code>float</code> The text font size <code>align_x</code> - <code>\"left\" | \"right\" | \"center\"</code> The horizontal text align Creating a <code>Text</code> <p><pre><code>self.my_rectangle = Rectangle(color=\"white\", children = [\n    Text(\"Hello\\nWorld!\", font_size=5, color=\"orange\")\n])\n</code></pre> </p>"},{"location":"create_an_exercise/UI/#dynamictext","title":"<code>DynamicText</code>","text":"<p>Alternative to <code>Text</code> where the text is adjusted to fit within the size rather than the other way around.</p> <p>General attributes/methods: <code>common</code>, <code>action</code>, <code>click</code>, <code>drag</code>, <code>keyboard</code>, <code>fit to content</code></p> <code>text</code> - <code>str</code> The text to display, required and positional <code>color</code> - <code>str</code> The text color <code>font_size</code> - <code>float</code> The text font size <code>align_x</code> - <code>\"left\" | \"right\" | \"center\"</code> The horizontal text align <code>align_y</code> - <code>\"top\" | \"bottom\" | \"center\"</code> The vertical text align Creating a <code>DynamicText</code> <pre><code>self.my_rectangle = Rectangle(color=\"white\", children = [\n    DynamicText(\"Hello\\nWorld!\", font_size=5, color=\"orange\", w=10)\n])\n</code></pre>"},{"location":"create_an_exercise/UI/#htmlarea","title":"<code>HtmlArea</code>","text":"<p>Used to add a block of text that can be formatted using HTML code. If the content is wider or taller than the element size, a scrollbar will appear. It is possible to include images and CSS, using normal HTML syntax.</p> <p>General attributes/methods: <code>common</code>, <code>scroll</code></p> <code>html</code> - <code>str</code> The HTML text to display, required and positional <code>font_size</code> - <code>float</code> The text font size <code>align_x</code> - <code>\"left\" | \"right\" | \"center\"</code> The horizontal text align <code>disable_scroll</code> - <code>bool</code> Disables scroll and all ScrollArea features so it will limit the HtmlArea to its width and height. <code>disable_auto_font_scale</code> - <code>bool</code> Disables auto font scale and the text font size will be applied. Creating an <code>HtmlArea</code> <p><pre><code>self.my_rectangle = Rectangle(color=\"white\", children = [\n    HtmlArea(\"Hello &lt;b&gt;World&lt;/b&gt;!\", font_size=4, w=15, h=15, disable_scroll=True, disable_auto_font_scale=True)\n])\n</code></pre> </p>"},{"location":"create_an_exercise/UI/#graphics","title":"Graphics","text":"<p>These elements can be used to display images and animations.</p>"},{"location":"create_an_exercise/UI/#image","title":"<code>Image</code>","text":"<p>Displays a static image.</p> <p>General attributes/methods: <code>common</code>, <code>action</code>, <code>click</code>, <code>drag</code>, <code>keyboard</code></p> <code>image</code> - <code>str</code> S The name of the image to show <code>color</code> - <code>str</code> A color to use for tinting the image Creating three <code>Image</code> objects <p><pre><code>self.my_rectangle = Rectangle(color=\"white\", children = [\n    # Left cat\n    Image(\"std_katniss_standing.webp\", w=4, h=3),\n\n    # Slightly squished cat\n    Image(\"std_katniss_standing.webp\", w=4, h=2, x=4, y=1.5),\n\n    # Red background cat\n    Image(\"std_katniss_standing.webp\", w=8, h=4, x=2, y=2, rotation=20, color=\"red\", opacity=0.3, z_index=-1, scale_x=-1)\n])\n</code></pre> </p> <p>Note</p> <p>There are many images provided by the framework that can be accessed simply by using their names as the <code>image</code> string. You can find them all in Built in images.</p>"},{"location":"create_an_exercise/UI/#sprite","title":"<code>Sprite</code>","text":"<p>Displays an animated image. See Create Sprite Sheet to learn about creating a sprite sheet.</p> <p>General attributes/methods: <code>common</code>, <code>action</code>, <code>click</code>, <code>drag</code>, <code>keyboard</code></p> <code>image</code> - <code>str</code> S The name of the sprite sheet to show <code>color</code> - <code>str</code> A color to use for tinting the image <code>animation</code>/<code>anim</code> - <code>str</code> S The name of the animation to play, use <code>\"default\"</code> for the default animation <code>start_frame</code>/<code>start</code> - <code>int | None</code> S An animation frame to start on <code>end_frame</code>/<code>end</code> - <code>int | None</code> S An animation frame to end on Creating three <code>Sprite</code> objects <p><pre><code>a = Sprite(\"weird_sheet.png\", w=2, h=2, x=1, y=1)\nb = Sprite(\"weird_sheet.png\", w=2, h=2, x=3, y=1, start=2, end=0, scale_x=-1)\nc = Sprite(\"weird_sheet.png\", w=1.5, h=2, x=5, y=1, animation=\"just_display_guy\")\n</code></pre> </p>"},{"location":"create_an_exercise/UI/#containers","title":"Containers","text":"<p>These elements can be used to fit more content in the canvas.</p> Creating a container <pre><code>canvas.new_container(x=2.5, y=4)\n</code></pre>"},{"location":"create_an_exercise/UI/#scrollarea","title":"<code>ScrollArea</code>","text":"<p>Use when you want some content to be scrollable (vertical and/or horizontal).</p> <p>General attributes/methods: <code>common</code>, <code>scroll</code></p> Creating a <code>ScrollArea</code> <pre><code>scroll = ScrollArea(w=40, h=20)\nText(\"Hello World!\", font_size=20, parent=scroll)\n</code></pre> <p>A scroll area is a container that can hold other elements, allowing the user to scroll through them if they don't all fit in the visible region. This is useful when you want to show many elements in a limited space.</p> <p>General attributes/methods: <code>common</code>, <code>scroll</code></p> Creating a <code>ScrollArea</code> <pre><code>scroll_area = canvas.new_scroll_area(width=8, height=3,color='blacklwhite', thickness=0.3, x=3.5, y=12)\ncanvas.new_circle(radius= 0.4, color='red', x=O, y=O,parent=scroll_area)\n</code></pre>"},{"location":"create_an_exercise/UI/#tabarea","title":"<code>TabArea</code>","text":"<p>Use when you want to split up some content into tabs. Consider putting tab content into <code>ScrollArea</code>s for even more space.</p> <p>General attributes/methods: <code>common</code>, <code>style</code></p> <code>tabs</code> - <code>dict[str, BaseElement]</code> The tab names and content to include, required and positional, constructor only <code>font_size</code> - <code>float</code> The font size to use for the tab headers Creating a <code>TabArea</code> <pre><code>red = Rectangle(color=\"red\", children=[Text(\"R\", font_size=20)])\ngreen = Rectangle(color=\"green\", children=[Text(\"G\", font_size=20)])\nblue = Rectangle(color=\"blue\", children=[Text(\"B\", font_size=20)])\n\nTabArea({\"Red\": red, \"Green\": green, \"Blue\": blue}, w=30, h=50)\n</code></pre>"},{"location":"create_an_exercise/UI/#layouts","title":"Layouts","text":"<p>These elements can be used to simplify positioning of elements. They handle addition, removal and resizing of elements as well. Also, these elements cascade resizing down to any children. Other elements like <code>Rectangle</code> are resized if the parent is a <code>Layout</code> element, but a <code>Rectangle</code> doesn't cascade resizing to its children.</p>"},{"location":"create_an_exercise/UI/#horizontal","title":"<code>Horizontal</code>","text":"<p>Used to position elements horizontally.</p> <p>General attributes/methods: <code>common</code>, <code>layout</code></p> <p>All positional arguments are added as children.</p> <code>proportions</code> - <code>list[float]</code> Proportions of size to give to each element, 0 means an even proportion of the remaining space Creating a <code>Horizontal</code> <p><pre><code>Horizontal(Rectangle(color=\"yellow\"), Rectangle(color=\"magenta\"), Rectangle(color=\"cyan\"))\n</code></pre> </p> <p>When using proportions, the values should always add up to 1. In the example below, the Horizontal layout contains two objects, and only one proportion is explicitly defined: 0.1. This means the first object takes up 10% of the width, and the second automatically gets the remaining 90% (i.e., 1 - 0.1 = 0.9).</p> <p>When there are exactly two objects, it's enough to specify the proportion for one \u2014 the other will be calculated automatically.</p> Creating a <code>Horizontal Proportions</code> <pre><code>Horizontal(\n    self.title_solution,\n    self.label_solution,\n    proportions=[0.1] \n)\n</code></pre>"},{"location":"create_an_exercise/UI/#vertical","title":"<code>Vertical</code>","text":"<p>Used to position elements vertically.</p> <p>General attributes/methods: <code>common</code>, <code>layout</code></p> <p>All positional arguments are added as children.</p> <code>proportions</code> - <code>list[float]</code> Proportions of size to give to each element, 0 means an even proportion of the remaining space Creating a <code>Vertical</code> <p><pre><code>Vertical(*[Text(str(i)) for i in range(5)], spacing=5)\n</code></pre> </p> <p>When using proportions, the values in the list should always add up to 1. In the example below, the Vertical layout contains five objects. The sizes of the first four are set to 0.05, 0.1, 0.3, and 0.3, which means the fifth object automatically takes the remaining space: 0.25.</p> <p>When there are multiple objects, you can specify proportions for all but the last one \u2014 its size will be calculated automatically to make the total equal to 1.</p> Creating a <code>Vectical Proportions</code> <pre><code>self.tab_step_2 = Vertical(\n    self.title2,\n    Horizontal(\n        self.button_row,\n        proportions=[0],\n    ),\n    self.top_caesar_graph,\n    self.bottom_caesar_graph,\n    Horizontal(\n        self.title_solution,\n        self.label_solution,\n        proportions=[0.1],\n    ),\n    anchor=-1,\n    spacing=2,\n    proportions=[0.05, 0.1, 0.3, 0.3]\n)\n</code></pre>"},{"location":"create_an_exercise/UI/#grid","title":"<code>Grid</code>","text":"<p>Used to position elements in a grid.</p> <p>General attributes/methods: <code>common</code>, <code>layout</code></p> <p>All positional arguments are added as children.</p> <code>rows</code> - <code>int</code> Number of rows in the grid, calculated if not set <code>columns</code> - <code>int</code> Number of columns in the grid, calculated if not set <code>transpose</code> - <code>bool</code> Whether to place columns first, rather than rows first <code>alignments</code> - <code>tuple[list[\"left\" | \"right\" | \"center\" | None], list[\"top\" | \"bottom\" | \"center\" | None]</code> Alignments for each column or row and column, <code>None</code> means use the <code>align_x/align_y</code> value <code>proportions</code> - <code>tuple[list[float], list[float]</code> Proportions of size to give to each row and column, <code>0</code> means an even proportion of the remaining space Creating a <code>Grid</code> <p><pre><code>Grid(*[Text(str(i)) for i in range(20)], columns=5, w=30, h=30, spacing=5)\n</code></pre> </p>"},{"location":"create_an_exercise/UI/#controls","title":"Controls","text":"<p>These elements are interactive UI elements mostly useful in interact mode.</p>"},{"location":"create_an_exercise/UI/#button","title":"<code>Button</code>","text":"<p>Used to create a button.</p> <p>General attributes/methods: <code>common</code>, <code>style</code>, <code>action</code>, <code>click</code>, <code>fit to content</code></p> <code>text</code> - <code>str</code> The text on the button, required and positional <code>font_size</code> - <code>float</code> The font size of the button text <code>align_x</code> - <code>\"left\" | \"right\" | \"center\"</code> The horizontal text align <code>align_y</code> - <code>\"top\" | \"bottom\" | \"center\"</code> The vertical text align <code>padding</code> - <code>float</code> Padding around the text within the button <code>border_size</code> - <code>float | None</code> The thickness of the border around the button <code>corner_radius</code> - <code>float | None</code> The radius of the corners of the button, set to <code>None</code> for a square button <code>overlay</code> - <code>bool</code> Whether to use the overlay styling for this button or not <code>primary</code> - <code>bool</code> Whether to use the primary styling for this button or not <code>enabled</code> - <code>bool</code> S If set to <code>False</code> will both disable click callbacks and use the disabled styling Creating a <code>Button</code> <pre><code>def callback(event):\n    print(\"Button clicked!\")\n\nButton(\"Click me!\", on_click=callback)\n</code></pre>"},{"location":"create_an_exercise/UI/#checkbox","title":"<code>Checkbox</code>","text":"<p>Use to create a checkbox.</p> <p>General attributes/methods: <code>common</code>, <code>style</code>, <code>action</code>, <code>click</code></p> <code>checked</code> - <code>bool</code> S Whether the checkbox is checked or not <code>intermediate</code> - <code>bool</code> S Whether the checkbox is in an intermediate state or not <code>intermediate_value</code> - <code>bool</code> The checked value to use when the checkbox is in an intermediate state <code>text</code> - <code>str | None</code> The label next to the checkbox <code>font_size</code> - <code>float</code> The font size of the checkbox label <code>solid</code> - <code>bool</code> S Whether to use the solid icons for this checkbox or not <code>enabled</code> - <code>bool</code> S If set to <code>False</code> will both disable click callbacks and use the disabled styling <code>on_change</code> - <code>(CheckboxEventData) -&gt; None</code> E Called whenever the checkbox changes state Creating a <code>Checkbox</code> <pre><code>def callback(event):\n    print(\"Checkbox was checked\" if event.checked else \"Checkbox was unchecked\")\n\nCheckbox(scale=4, on_change=callback)\n</code></pre>"},{"location":"create_an_exercise/UI/#panels","title":"Panels","text":"<p>These elements can be used to visually separate a set of other elements.</p>"},{"location":"create_an_exercise/UI/#panel","title":"<code>Panel</code>","text":"<p>A simple panel. Can have a title and a title image. Can also have content with will be resized based on the panel size.</p> <p>General attributes/methods: <code>common</code>, <code>style</code></p> <code>content</code> - <code>BaseElement</code> R Content to but inside the panel, constructor only <code>title</code> - <code>str</code> R A title for the panel, constructor only <code>title_image</code> - <code>str</code> An image to put in the top-right corner of the panel, only visible if a title is set <code>font_size</code> - <code>float</code> The font size of the title text <code>corner_radius</code> - <code>float | None</code> The radius of the corners of the panel, set to <code>None</code> for a square panel <code>overlay</code> - <code>bool</code> Whether to use the overlay styling for this panel or not <code>spacing</code> - <code>float</code> The distance between the title and content <code>padding</code> - <code>float</code> The distance between panel content/title and the outer edge Creating a <code>Panel</code> <p><pre><code>Panel(w=50, h=50, content=Circle(color=\"blue\"), title=\"My Panel\")\n</code></pre> </p>"},{"location":"create_an_exercise/UI/#toolbar","title":"<code>Toolbar</code>","text":"<p>A panel with three distinct areas: left, right, and center. Children within each area are arranged horizontally.</p> <p>General attributes/methods: <code>common</code>, <code>style</code></p> <code>corner_radius</code> - <code>float | None</code> The radius of the corners of the panel, set to <code>None</code> for a square panel <code>overlay</code> - <code>bool</code> Whether to use the overlay styling for this panel or not <code>spacing</code> - <code>float</code> The distance between children within each area <code>padding</code> - <code>float</code> The distance between toolbar content and the outer edge Creating a <code>Toolbar</code> <p><pre><code>Toolbar(\n    w=80,\n    h=10,\n    fixed_height=True,\n    left_children=[Circle()],\n    right_children=[Rectangle()],\n    center_children=[Text(\"TOOLBAR\")],\n)\n</code></pre> </p>"},{"location":"create_an_exercise/UI/#popup","title":"<code>Popup</code>","text":"<p>A popup panel with a message and ability to add buttons. The popup needs to be activated by toggling. Clicking any of the popup buttons will close the popup. Only works properly in interact mode.</p> <p>General attributes/methods: <code>common</code>, <code>style</code></p> <code>text</code> - <code>str</code> R The message to display, required and positional, constructor only <code>buttons</code> - <code>list[Button]</code> R The buttons to include, required and positional, constructor only <code>corner_radius</code> - <code>float | None</code> The radius of the corners of the panel, set to <code>None</code> for a square panel <code>overlay</code> - <code>bool</code> Whether to use the overlay styling for this panel or not <code>spacing</code> - <code>float</code> The distance between buttons <code>padding</code> - <code>float</code> The distance between popup content and the outer edge Creating a <code>Popup</code> <pre><code>def callback(event):\n    print(\"Deal!\")\n\nbuttons = [Button(\"OK\", primary=True, on_click=callback), Button(\"Cancel\")]\npopup = Popup(\"My Popup!\", buttons, w=30, h=15, anchor_y=1, y=-5)\nRectangle(size=20, hover_targets=[popup], children=[popup])\n</code></pre>"},{"location":"create_an_exercise/UI/#specialized","title":"Specialized","text":"<p>These elements are not as generally useful as the others, but are very useful for specific tasks.</p>"},{"location":"create_an_exercise/UI/#board","title":"<code>Board</code>","text":"<p>Use to create a chess-like game board of square grids. If you need something more dynamic or want more features, take a look at World.</p> <p>You can place elements on the board by coordinates, e.g. <code>board[0, 2] = Circle(color=\"red\")</code>. The elements will automatically be positioned and resized to match the specified square. There can only be one element at each coordinate, which can be fetch like so: <code>board[0, 2]</code>.</p> <p>General attributes/methods: <code>common</code>, <code>style</code></p> <code>rows</code> - <code>int</code> R How many rows the board should have <code>columns</code> - <code>int</code> R How many columns the board should have <code>line_size</code> - <code>float</code> The thickness of the grid lines <code>edge_size</code> - <code>float</code> The thickness of the edge outside the grid <code>font_size</code> - <code>float</code> The font size of the square coordinate labels <code>row_labels</code> - <code>list[str]</code> R The labels to use for the rows, you can use the constants <code>LOWERCASE_LABELS</code>, <code>UPPERCASE_LABELS</code>, and <code>NUMBER_LABELS</code> <code>column_labels</code> - <code>list[str]</code> R The labels to use for the columns, you can use the constants <code>LOWERCASE_LABELS</code>, <code>UPPERCASE_LABELS</code>, and <code>NUMBER_LABELS</code> <code>invert_rows</code> - <code>bool</code> R Will draw the rows bottom to top rather than top to bottom <code>invert_columns</code> - <code>bool</code> R Will draw the columns right to left rather than left to right <code>corner_radius</code> - <code>float | None</code> The radius of the corners of the board, set to <code>None</code> for a square panel <code>overlay</code> - <code>bool</code> Whether to use the overlay styling for this board or not Creating a <code>Board</code> <p><pre><code>def callback(event):\n    event.source.color = \"orange\"\n\nboard = Board(size=64)\nfor r in range(board.rows):\n    for c in range(board.columns):\n        board[r, c] = Circle(scale=0.9, color=\"green\", on_click=callback)\n</code></pre> </p>"},{"location":"create_an_exercise/UI/#stage","title":"<code>Stage</code>","text":"<p>This element is primarily used by the <code>StageChallenge</code> and <code>GameChallenge</code> skeletons. It is recommended to use those rather than using this element directly.</p> <p>General attributes/methods: <code>common</code>, <code>style</code></p> <code>content</code> - <code>BaseElement</code> R The main content to put in the middle of the stage, required and positional, constructor only <code>info_panel</code> - <code>BaseElement | None</code> R Optional content to put on the left-hand side, constructor only <code>tabs</code> - <code>dict[str, BaseElement]</code> R Tabs to show on the right-hand side, constructor only <code>show_toolbar</code> - <code>bool</code> R Whether to show the toolbar or not, constructor only <code>center_buttons</code> - <code>list[Button]</code> R Buttons to put in the center of the toolbar, constructor only <code>right_buttons</code> - <code>list[Button]</code> R Buttons to put to the right of the toolbar, constructor only <code>info_prompt</code> - <code>str</code> Text to show in the toolbar on the lower left <code>spacing</code> - <code>float</code> Distance between the areas of the stage <code>toolbar_height</code> - <code>float</code> The height of the toolbar"},{"location":"create_an_exercise/UI/#speechbubble","title":"<code>SpeechBubble</code>","text":"<p>Use to create a speech bubble. Mainly used by the <code>.say(...)</code> command for character actors in World.</p> <p>General attributes/methods: <code>common</code>, <code>fit to content</code></p> <code>text</code> - <code>str</code> S The text within the speech bubble, required and positional <code>font_size</code> - <code>float</code> S The desired text font size <code>settings</code> - <code>SpeechBubbleSettings</code> S Specifies the shape of the speech bubble: <ul> <li><code>radius</code> - The radius of the speech-bubble \"corners\"</li> </ul> <ul> <li><code>tail_inset</code> - How far in the tail should be positioned (x-offset)</li> </ul> <ul> <li><code>tail_width</code> - How thick the tail should be</li> </ul> <ul> <li><code>tail_height</code> - How tall the tail should be</li> </ul> <ul> <li><code>tail_point_offset</code> - How the tail tip should be positioned (x-offset)</li> </ul> <ul> <li><code>tail_position</code> - Where to put the tail, one of \"bottom_left\", \"bottom_right\", \"top_left\", or \"top_right\"</li> </ul> <ul> <li><code>shadow_height</code> - How high up the lower shading of the bubble should go</li> </ul> <ul> <li><code>edge_size</code> - How thick the edge around the bubble should be</li> </ul> <code>theme</code> - <code>SpeechBubbleTheme</code> Specifies the color scheme of the speech bubble: <ul> <li><code>text_color</code> - The color of the text</li> </ul> <ul> <li><code>bubble_color</code> - The background color of the bubble</li> </ul> <ul> <li><code>shadow_color</code> - The shading color of the bubble</li> </ul> <ul> <li><code>edge_color</code> - The color of the bubble edge</li> </ul> <code>auto_fit</code> - <code>bool</code> Whether to automatically resize the bubble to fit the text or not, can use <code>.fit_to_content()</code> manually <code>auto_anchor</code> - <code>bool</code> Whether to automatically anchor the element position to the tail tip or not, can use <code>.anchor_at_tail()</code> manually"},{"location":"create_an_exercise/UI/#table","title":"<code>Table</code>","text":"<p>Extends the <code>Grid</code> element with grid lines. It is recommended to use a data manager.</p> <p>Almost identical to <code>Grid</code>, but with the following additional attributes:</p> <code>style</code> - <code>Style</code> See styling <code>line_size</code> - <code>float | None</code> The thickness of the grid lines, use <code>None</code> to remove the lines"},{"location":"create_an_exercise/UI/#attributes-methods","title":"Attributes / Methods","text":"<p>This section lists the attributes and methods common among several elements, check each element above for which apply.</p> <p>A few attributes are marked with a letter, they have the following meanings:</p> C - coordinate This attribute is a coordinate property, see Coordinates E - event callback This attribute is an event callback, see Events R - readonly This attribute can not be updated (or animated) S - static This attribute can not be animated, see Animation"},{"location":"create_an_exercise/UI/#common","title":"Common","text":"<code>parent</code> - <code>Container | None</code> S The parent of the element <code>size</code> - <code>tuple[float, float]</code> C The size (width and height) of the element Some elements calculate these values based on other attributes, in which case the size is read-only <code>.request_size(size)</code> Ask the element to adjust its size to match the given size, taking into account min and max size and other restrictions <code>.request_size(size, time)</code> Same as above but using an animation time, see Animation <code>size_x</code>/<code>width</code>/<code>w</code> - <code>float</code> The width of the element, component of <code>size</code> <code>.request_width(width)</code> Ask the element to adjust its width to match the given width, taking into account min and max width and other restrictions <code>.request_width(width, time)</code> Same as above but using an animation time, see Animation <code>size_y</code>/<code>height</code>/<code>h</code> - <code>float</code> The height of the element, component of <code>size</code> <code>.request_height(height)</code> Ask the element to adjust its height to match the given height, taking into account min and max height and other restrictions <code>.request_height(height, time)</code> Same as above but using an animation time, see Animation <code>min_size</code> - <code>tuple[float, float]</code> C The minimum size of the element, does not apply automatically and does not prevent setting the size manually <code>min_size_x</code>/<code>min_width</code>/<code>min_w</code> - <code>float</code> The minimum width of the element, component of <code>min_size</code> <code>min_size_y</code>/<code>min_height</code>/<code>min_h</code> - <code>float</code> The minimum height of the element, component of <code>min_size</code> <code>max_size</code> - <code>tuple[float, float]</code> C The maximum size of the element, does not apply automatically and does not prevent setting the size manually <code>max_size_x</code>/<code>max_width</code>/<code>max_w</code> - <code>float</code> The maximum width of the element, component of <code>max_size</code> <code>max_size_y</code>/<code>max_height</code>/<code>max_h</code> - <code>float</code> The maximum height of the element, component of <code>max_size</code> <code>fixed_width</code> - <code>bool</code> If set to <code>True</code> then the width will not be changed automatically, can still be changed manually though <code>fixed_height</code> - <code>bool</code> If set to <code>True</code> then the height will not be changed automatically, can still be changed manually though <code>position</code>/<code>pos</code> - <code>tuple[float, float]</code> C The position of the element, relative to the <code>anchor</code> (usually center of the element) <code>position_x</code>/<code>pos_x</code>/<code>x</code> - <code>float</code> The x-position of the element, component of <code>position</code> <code>position_y</code>/<code>pos_y</code>/<code>y</code> - <code>float</code> The y-position of the element, component of <code>position</code> <code>offset</code> - <code>tuple[float, float]</code> C An offset to apply to the element position, useful if the position is controlled by another element <code>offset_x</code> - <code>float</code> The x-offset of the element, component of <code>offset</code> <code>offset_y</code> - <code>float</code> The y-offset of the element, component of <code>offset</code> <code>anchor</code> - <code>tuple[float, float]</code> C The anchor point of the element, <code>0</code> means center, <code>-1</code> means left/top and <code>1</code> means right/bottom. <code>anchor_x</code> - <code>float</code> The x-anchor of the element, component of <code>anchor</code> <code>anchor_y</code> - <code>float</code> The y-anchor of the element, component of <code>anchor</code> <code>z_index</code>/<code>z</code> - <code>float</code> The visual sorting of the element or \"distance from the screen\", an element with higher z-index will be drawn above others Children will have the same z-index as their parents from the outside <code>scale</code> - <code>tuple[float, float]</code> C Scaling factor for the element, is not considered when estimating the size or position of the element <code>scale_x</code> - <code>float</code> The x-scale of the element, component of <code>scale</code> <code>scale_y</code> - <code>float</code> The y-scale of the element, component of <code>scale</code> <code>rotation</code> - <code>float</code> The rotation of the element in degrees, positive values means clockwise and negative means counter-clockwise <code>pivot</code> - <code>tuple[float, float]</code> C The pivot point of the element, which is used as the rotation point <p>Note</p> <code>pivot</code> does not work properly for <code>Text</code>, <code>Image</code>, and <code>Sprite</code> <code>pivot_x</code> - <code>float</code> The x-pivot of the element, component of <code>pivot</code> <code>pivot_y</code> - <code>float</code> The y-pivot of the element, component of <code>pivot</code> <code>toggle_group</code> - <code>str | None</code> The toggle group of the element, see Toggling <code>toggle_by_default</code> - <code>bool</code> Whether the element should start out toggled on <code>opacity</code> - <code>float</code> The opacity of the element, <code>1</code> means fully opaque and <code>0</code> means fully transparant <code>on_resize</code> - <code>(ResizeEventData) -&gt; None</code> E Called after the element is given a new size"},{"location":"create_an_exercise/UI/#container","title":"Container","text":"<code>children</code> - <code>list[BaseElement]</code> R Elements to add as children if in constructor otherwise a read-only list of current children <code>.add_child(child)</code> Add a new child to the element, removing it from any previous parent <code>.add_children(child_1, child_2, ...)</code> Add several new children to the element <code>.remove_child(child)</code> Removes a child from the element <code>.remove_children(child_1, child_2, ...)</code> Removes several children from the element <code>on_add_child</code> - <code>(ChildEventData) -&gt; None</code> E Called when a (public) child is added to the container <code>on_remove_child</code> - <code>(ChildEventData) -&gt; None</code> E Called when a (public) child is removed from the container"},{"location":"create_an_exercise/UI/#shape","title":"Shape","text":"<code>color</code> - <code>str</code> The fill or stroke color of the shape <code>stroke</code> - <code>float | None</code> S Draw the edge of the shape rather than the area"},{"location":"create_an_exercise/UI/#action","title":"Action","text":"<code>action_effect</code> - <code>Effect | None</code> Effect to apply when hovering the element and it is interactable <code>hover_effect</code> - <code>Effect | None</code> Effect to apply when hovering the element Adding three polygons <pre><code>canvas.new_rectangle(1.6, 0.8, 'red', x=15, y=5, radius=0.1, hover_effect={'color': 'orange|yellow'})\n</code></pre> <code>hover_targets</code> - <code>list[BaseElement]</code> Elements that will be toggled while this element is hovered"},{"location":"create_an_exercise/UI/#click","title":"Click","text":"<code>on_click</code> - <code>(ClickEventData) -&gt; None</code> E Called when this element is clicked in interact mode <code>click_targets</code> - <code>list[BaseElement]</code> Elements that will be toggled when this element is clicked <code>interact_click_targets</code> - <code>list[BaseElement]</code> Same as <code>click_targets</code> but only works in interact mode"},{"location":"create_an_exercise/UI/#drag","title":"Drag","text":"<code>draggable</code> - <code>bool | None</code> S Whether the element should be draggable, set to <code>None</code> for default behaviour <code>on_drop</code> - <code>(DragEventData) -&gt; None</code> E Called when this element is dropped after being dragged <code>drag_targets</code> - <code>list[BaseElement]</code> Elements that will be toggled while this element is dragged <code>drag_effect</code> - <code>Effect | None</code> Effect to apply when the element is being dragged <code>drop_zones</code> Target areas in the exercise UI where draggable elements can be dropped.  <code>drop_zone_effect</code> Describes the visual or behavioral feedback a drop zone provides when a user drags an item over it. This can include highlighting, cursor changes, or animations to indicate whether a drop is allowed or desirable. <code>drag_zone</code> Refers to the source area or elements from which items can be dragged.  <code>drag_zone_effect</code> Describes the user feedback or restrictions applied during the drag operation. This might include the type of drag allowed (e.g. \"move\", \"copy\"), visual cues like shadows or opacity, and constraints on which elements can be dragged. <code>drop_event</code> A system or browser event that is triggered when a draggable item is released over a drop zone. This event is captured to determine whether the item was dropped in a valid location and to trigger scoring or feedback logic."},{"location":"create_an_exercise/UI/#keyboard","title":"Keyboard","text":"<code>key_list</code> - <code>list[str]</code> S Keys this element should listen for, see Keys <code>on_key_up</code> - <code>(KeyboardEventData) -&gt; None</code> E Called when a key is released (if in <code>key_list</code> or it is empty)"},{"location":"create_an_exercise/UI/#scroll","title":"Scroll","text":"<code>widget_color</code> - <code>str</code> The color of the scroll bars <code>widget_size</code> - <code>float</code> S The size of the scroll bars <code>follow_bottom</code> - <code>bool</code> If set to <code>True</code> then the area will continue scrolling automatically if at the bottom"},{"location":"create_an_exercise/UI/#layout","title":"Layout","text":"<code>spacing</code> - <code>float</code> Distance between elements <code>align_x</code> - <code>\"left\" | \"right\" | \"center\"</code> The horizontal element align <code>align_y</code> - <code>\"top\" | \"bottom\" | \"center\"</code> The vertical element align"},{"location":"create_an_exercise/UI/#style","title":"Style","text":"<code>style</code> - <code>Style</code> The style to apply to this element, see Styling"},{"location":"create_an_exercise/UI/#fittocontent","title":"FitToContent","text":"<code>.fit_to_content()</code> Ask element to adjust its size based on the content <code>.fit_to_content(time)</code> Same as <code>.fit_to_content()</code> but at the given animation time"},{"location":"create_an_exercise/UI/#coordinates","title":"Coordinates","text":"<p>The attributes marked with a C is a coordinate attribute. This means that it has two component attributes for the <code>x</code> and <code>y</code> values. You can modify either of these three attributes (or any aliases) to change (part) of the coordinate.</p> <p>The coordinate property has some additional convenience features:</p> <ul> <li>Vector operations such as addition, subtraction, multiplication and division</li> <li>Conversion of scalar values to a pair</li> </ul> Using coordinates <pre><code>rect = Rectangle()\nrect.size = 20       # set size to (20, 20)\nrect.pos += (5, 10)  # add (5, 10) to position\nrect.anchor -= 1     # subtract (1, 1) from anchor\nrect.scale *= 2      # multily scale by 2\n</code></pre> <p>You can also access the <code>x</code> and <code>y</code> elements of the coordinates as members, e.g. <code>rect.pivot.x</code>, but you can not assign to them, so it is better to always use <code>rect.pivot_x</code>.</p>"},{"location":"create_an_exercise/UI/#animation","title":"Animation","text":"<p>Many attributes are animated when modified, such as gradually turning transparent when setting <code>opacity</code> to <code>0</code>. But it is possible to control this in more detail using the animation features of the UI library.</p> <p>Note</p> <p>To get animation to work, go to the Graphics tab in Freecode Creator and check \"Uses Canvas\" and \"Has Canvas Animation\".</p> <p>You can specify the values of many attributes with more precise timing using the <code>.time(time)</code> method. It returns a virtual copy of the element which represents the element at that time. The time should be a number from <code>0.0</code> to <code>1.0</code> which corresponds to a fraction of the time step, where <code>0.0</code> is at the start, <code>0.5</code> is at the middle, and <code>1.0</code> is at the end of the time step.</p> Creating a shaking animation <pre><code># setup_canvas / setup_view\nself.box = Rectangle()\n\n# update_canvas / update_view\nself.box.time(0.2).rotation = 15\nself.box.time(0.4).rotation = -10\nself.box.time(0.6).rotation = 10\nself.box.time(0.8).rotation = -15\nself.box.time(1).rotation = 0\n</code></pre> <p>You might realize that you do not want an attribute to be animated, in which case you can use <code>.instant</code> which is the same as <code>.time(0)</code>. If you want it to happen later in the time step you can first add the old value with a time value, and then the new value with a slightly higher time value e.g. <code>.time(0.499)</code> and then the new value with <code>time(0.5)</code>. This will ensure that the value change occurs immediately without any intermediate values.</p> Making boxes suddenly transparent <pre><code># setup_canvas / setup_view\nself.box_0 = Rectangle()\nself.box_1 = Rectangle()\nself.box_2 = Rectangle()\n\n# update_canvas / update_view\nself.box_0.instant().opacity = 0.5\n\nself.box_1.time(0).opacity = 0.5\n\nself.box_2.time(0.499).opacity = 1.0\nself.box_2.time(0.5).opacity = 0.5\n</code></pre>"},{"location":"create_an_exercise/UI/#step-animation","title":"Step animation","text":"<p>It is possible to go to the next time step manually, this can be very useful when making more elaborate animations. You do this by calling <code>canvas.split_step()</code>. All graphical operations performed after <code>canvas.split_step()</code> will occur in a new step.</p>"},{"location":"create_an_exercise/UI/#example-falling-rectangle","title":"Example: Falling rectangle","text":"<p>We want to have a rectangle that tips over and lands on one side. The rectangle should be 2 units wide, 8 units high, and have its pivot offset from the center to its lower right corner. We will also offset it 6 units to the right and 9 units down to make it easier to see. If we do all this it should be placed like in the image below: </p> <p>Note</p> <p>The coordinate (0, 0) is in the upper left corner, x grows to the right, and y grows downwards.</p> <p>Note</p> <p>The grey dots show all points that have integer coordinates, i.e. (1, 1), (2, 1), and so on.</p> Code for defining our rectangle <pre><code>self.falling_rect = Rectangle(w=2, h=8, x=6, y=9, color=\"red\", pivot_x=1, pivot_y=4)\n</code></pre> <p>We don't want the rectangle to suddenly hit the ground. To make the fall look somewhat natural we will divide it up like this:</p> <ul> <li>The rectangle will stand still for one time step</li> <li>The rectangle will rotate 45 degrees the first 70% of the second time step</li> <li>The rectangle will rotate 45 degrees more during the remaining 30% of the second time step</li> </ul> <p></p> Code for defining our rectangle's fall <pre><code># No animation in the first step\nself._context.canvas.split_step()\n# In the first 70% of the step the rectangle falls 45 degrees\nself.falling_rect.time(0.7).rotation = -45\n# In the remaining 30% the rectangle falls the rest of the way\nself.falling_rect.time(1.0).rotation = -90\n</code></pre> <p>The end result will look like this:</p> <p></p> <p>Freecode that implements this animation: Freecode</p> <p>Note</p> <p>You need to be logged in to see the freecode</p> <p>Warning</p> <p>The freecode uses the old graphics style found in Freecode graphics</p>"},{"location":"create_an_exercise/UI/#effects","title":"Effects","text":"<p>It is possible to apply effects on some attributes while certain conditions are met, such as when an element is hovered over with the mouse. This is specified using the <code>Effect</code> object and effect attributes, such as <code>hover_effect</code>.</p> <p>The <code>Effect</code> object has support for the following attributes:</p> <ul> <li><code>color</code></li> <li><code>opacity</code></li> <li><code>rotation</code></li> <li><code>scale</code> or <code>scale_x</code>/<code>scale_y</code></li> </ul> <p>The specified values will be applied while the condition is met, and reverted once it is not.</p> Hover effect on a circle <pre><code>Circle(r=30, color=\"blue\", hover_effect=Effect(color=\"orange\"))\n</code></pre> <p>Many times you would want an effect only when an element is interactable. For this we have the <code>action_effect</code> attribute.</p> Making a circle interactable only when clickable <pre><code>Circle(r=30, color=\"blue\", action_effect=Effect(color=\"orange\"), on_click=lambda e: setattr(e.source, \"color\", \"green\"))\n</code></pre> <p>Effects of child elements will trigger if the effect of the parent would trigger.</p>"},{"location":"create_an_exercise/UI/#events","title":"Events","text":"<p>There are several events that can be listened to in order to react to element changes or user input. The easiest way to do this is to use to <code>on_[event]</code> attributes. These attributes takes callbacks, which are functions with a single parameter which will be an <code>EventData</code> object. Look at the example for <code>Button</code>, or the last example of the previous section.</p> <p>The subsections lists the additional attributes that are available for the different kinds of <code>EventData</code> objects.</p>"},{"location":"create_an_exercise/UI/#resizeeventdata","title":"ResizeEventData","text":"<code>source</code> - <code>BaseElement</code> The source element of the event <code>time</code> - <code>float | None</code> The time of the change, see Animation <code>dimensions</code>/<code>dims</code> - <code>Dimensions</code> The dimensions affected by the change"},{"location":"create_an_exercise/UI/#childeventdata","title":"ChildEventData","text":"<code>source</code> - <code>BaseElement</code> The source element of the event <code>child</code> - <code>BaseElement</code> The child in question"},{"location":"create_an_exercise/UI/#clickeventdata","title":"ClickEventData","text":"<code>source</code> - <code>BaseElement</code> The source element of the event"},{"location":"create_an_exercise/UI/#drageventdata","title":"DragEventData","text":"<code>source</code> - <code>BaseElement</code> The source element of the event <code>position</code>/<code>pos</code> - <code>tuple[float, float]</code> The drop position <code>position_x</code>/<code>pos_x</code>/<code>x</code> - <code>float</code> The x-component of the drop position <code>position_y</code>/<code>pos_y</code>/<code>y</code> - <code>float</code> The y-component of the drop position"},{"location":"create_an_exercise/UI/#keyboardeventdata","title":"KeyboardEventData","text":"<code>source</code> - <code>BaseElement</code> The source element of the event <code>key</code> - <code>str</code> The pressed key, see Keys"},{"location":"create_an_exercise/UI/#checkboxeventdata","title":"CheckboxEventData","text":"<code>source</code> - <code>BaseElement</code> The source element of the event <code>checked</code> - <code>bool</code> The new <code>checked</code> value <code>intermediate</code> - <code>bool</code> The new <code>intermediate</code> value"},{"location":"create_an_exercise/UI/#keys","title":"Keys","text":"<p>The <code>key</code> value in <code>KeyboardEventData</code> or the <code>key_list</code> attribute can either be a character matching the key (accounting for modifiers (e.g. Shift or Alt) and keyboard layout) or a special value corresponding to the key. The following table list some convenient constants that can be used:</p> Constant Key Key.UP Up Key.DOWN Down Key.LEFT Left Key.RIGHT Right Key.SPACE Space Key.ENTER Enter Manually check keyboard value (only works in interact mode) <pre><code>Rectangle(opacity=0, parent=self.canvas, on_key_up=lambda e: print(e.key))\n</code></pre>"},{"location":"create_an_exercise/UI/#toggling","title":"Toggling","text":"<p>This section covers the toggling system which can be used to create lightweight interactable UI. It is used for tabs and popups, but can be used for other purposes as well.</p> <p>Toggling can be triggered by hovering, clicking or dragging using <code>hover_targets</code>, <code>click_targets</code> and <code>drag_targets</code>. When an element is added as part of these lists, it will automatically be hidden and only shown once toggled. This can be avoided by setting <code>toggle_by_default</code> to <code>True</code> on the element in question.</p> <p>It is possible to group together elements in a toggle group by setting <code>toggle_group</code> to the same value for all elements. When elements are in a group at most one of the elements can be toggled on at a time. The toggling logic is slightly modified for elements within a toggle group, particularly they will not toggled off unless another element is toggled on.</p> <p>We support <code>toggle_group=&lt;string id&gt;</code> which will make sure that at most one in the toggle group is visible.</p> <p>we also support <code>toggle_by_default=&lt;boolean&gt;</code> which is by default False, but can be set True to show a member of the group from initial state.</p> Example of creating a tooltip <pre><code>tooltip_text = Text(\"My tooltip\")\ntooltip = Panel(size=tooltip_text.size + 3, y=-5, children=[tooltip_text])\nCircle(children=[tooltip], hover_targets=[tooltip])\n</code></pre>"},{"location":"create_an_exercise/UI/#styling","title":"Styling","text":"<p>Some elements have a <code>style</code> attribute which will be used to determine color and opacity. This <code>Style</code> object can be replaced with a custom style object to have different styling.</p>"},{"location":"create_an_exercise/World/","title":"World","text":"<p>This article goes through how to use the World library to create a topdown or isometric world.</p>"},{"location":"create_an_exercise/World/#overview","title":"Overview","text":"<p>The World library is split into two main parts:</p> <ul> <li>Core functionality, focused on flexibility and reuse</li> <li>Prefabricated content, focused on easy of use</li> </ul> <p>This article will focus on the prefab content, but include enough core details to be able to take full advantage of the library.</p> <p>The worlds created using this library are divided into descrete spaces, usually a square grid. So positions will be based on integer coordinates.</p> <p>The prefabricated content supports both topdown and isometric perspectives, and it is very easy to switch between the two as needed. Additional perspectives are possible, but not supported by the prefab content.</p> <p>Easiest way to get started is to pick up one of the templates at the end of the article, and then jump to relevant sections as questions come up.</p> <p>Note</p> <p>All classes on this page need to be imported from <code>lib.world</code>, unless otherwise specified.</p>"},{"location":"create_an_exercise/World/#setup","title":"Setup","text":"<p>To use the prefab content you will have to use the <code>WorldSetup</code> class. The following sections will assume that you have an instance of this class called <code>setup</code>.</p> <p>To start, just create the setup object like this <code>setup = WorldSetup()</code>.</p> <p>The class has the following attributes:</p> <code>directions</code> - <code>list[tuple[int, int]]</code> The allowed movement directions, see directions, defaults to <code>CARDINAL_DIRECTIONS</code> <code>basic</code> - <code>bool</code> If <code>True</code> will draw colored geometric shapes rather than the image-based tiles and walls <code>perspective</code> - <code>\"topdown\" | \"isometric\"</code> The perspective to use for the prefab content, defautls to <code>\"topdown\"</code> <code>resolution</code> - <code>int</code> The \"unit size\", the size of a tile in topdown, will be used for all content <code>block_corners</code> - <code>bool</code> If <code>True</code> will block diagonal movement next to a wall, should generally be enabled when using <code>SQUARE_DIRECTIONS</code> <code>debug_mode</code> - <code>bool</code> If <code>True</code> adds additional debugging features to the world element, see debugging <code>manager</code> - <code>PrefabManager</code> The object responsible for managing prefabricated assets, generally no need to override the default value Creating the setup object <pre><code>setup = WorldSetup(\n    directions=SQUARE_DIRECTIONS,\n    perspective=\"isometric\",\n    block_corners=True,\n)\n</code></pre>"},{"location":"create_an_exercise/World/#directions","title":"Directions","text":"<p>You can specify which directions exist in the world, which will affect how actors can move.</p> <p>By default only the cardinal directions exist:</p> <ul> <li><code>Cardinal.LEFT</code> = (-1, 0)</li> <li><code>Cardinal.RIGHT</code> = (1, 0)</li> <li><code>Cardinal.UP</code> = (0, -1)</li> <li><code>Cardinal.DOWN</code> = (0, 1)</li> </ul> <p>But these can be extended with diagonals:</p> <ul> <li><code>Ordinal.LEFT_UP</code> = (-1, -1)</li> <li><code>Ordinal.RIGHT_UP</code> = (1, -1)</li> <li><code>Ordinal.LEFT_DOWN</code> = (-1, 1)</li> <li><code>Ordinal.RIGHT_DOWN</code> = (1, 1)</li> </ul> <p>For convenience, the following direction list constants are available:</p> <ul> <li><code>CARDINAL_DIRECTIONS</code></li> <li><code>ORDINAL_DIRECTIONS</code></li> <li><code>SQUARE_DIRECTIONS</code></li> </ul> <p>You can specify any other set of directions you want, but it will seldom make sense to do so.</p>"},{"location":"create_an_exercise/World/#world","title":"World","text":"<p>To create the world itself you can use <code>world = setup.create_world()</code>.</p> <p>This section will not go into detail of how the <code>World</code> object works, that will be covered throughout this article.</p>"},{"location":"create_an_exercise/World/#rendering","title":"Rendering","text":"<p>The world library can be used without rendering, but generally you do want to show the results. When using the library you will initialize and make changes to the world in the <code>setup_state</code> and <code>update_state</code> methods. Then you will want to render and re-render the world in the <code>setup_canvas</code>/<code>setup_view</code> and <code>update_canvas</code>/<code>update_view</code> methods.</p> <p>When doing the initial render you can choose how the rendered element will behave:</p> <ul> <li>Use <code>world.render_resizable()</code> to get an element which dynamically scales the world to fit within the size of the element. Recommended for smaller worlds.</li> <li>Use <code>world.render_scrollable()</code> to get a scroll area containing the world. The size of the world is based on the <code>resolution</code>. Recommended for larger worlds.</li> </ul> <p>No matter which way you create the initial element, you need to call <code>world.render_changes()</code> when you want the world to be re-rendered. No need to do anything else.</p> <p>See the templates section for examples of how to do this in practice.</p>"},{"location":"create_an_exercise/World/#tiles","title":"Tiles","text":"<p>Worlds consist mainly of tiles, which are used to both define the walkable area of the world and the visual tiles the world consist of.</p> <p>The library comes with prefabricated graphical tiles and has built-in support for plain colored tiles, but it is also possible to make custom tiles.</p> <p>There are a few ways to add tiles to the world, which to use is partly up to need and partly up to preference.</p> <p>First way is to include a <code>tiles</code> argument to <code>setup.create_world()</code>. This can take the form of a dictionary with coordinates as keys and tiles as values.</p> Add tiles using a dictionary <pre><code>world = setup.create_world(tiles={\n    (0, 0): \"grass\",\n    (1, 0): \"grass\",\n    (0, 1): \"gravel\",\n})\n</code></pre> <p>Alternatively the <code>tiles</code> argument can be a string as described in tile map</p> Add tiles using a string <pre><code>world = setup.create_world(tiles=\"gg\\nr\")\n</code></pre> <p>Both the examples above result in a world that looks like this:</p> <p></p> <p>Second way is to use the <code>World</code> methods:</p> <code>world.add_tile(coordinate, data)</code> Where <code>data</code> depends on what types of tiles you are using Add single tile <pre><code>world.add_tile((1, 1), {\"name\": \"grass\"})\n</code></pre> <p>Or if using basic tiles:</p> Add single basic tile <pre><code>world.add_tile((1, 1), {\"color\": \"black\"})\n</code></pre> <code>world.fill(top_left, bottom_right, data)</code> Which will add the same tile to the area spanned by <code>top_left</code> and <code>bottom_right</code> Fill area with tiles <pre><code>world.fill((0, 0), (1, 1), {\"name\": \"mud\", \"color\": \"tan\"})\n</code></pre> <p>It is possible to get tile data for a coordinate using <code>world.get_tile_data(coordinate)</code>, and it is possible to get all tile coordinates using <code>world.get_tile_coordinates()</code>.</p> <p>You can remove a tile using <code>world.remove_tile(coordinate)</code>.</p>"},{"location":"create_an_exercise/World/#prefab-tiles","title":"Prefab tiles","text":"Constant Name Code Notes Top down Isometric Tile.BLOCKED blocked b blocking Tile.CARPET carpet c Tile.CARPET_BLUE carpet_blue k Tile.CARPET_BLUE_2 carpet_blue_2 K Tile.CARPET_GREY carpet_grey C Tile.GRASS grass g Tile.GRASS_2 grass_2 G Tile.GRAVEL gravel r Tile.MUD mud m Tile.PARQUET parquet p Tile.PARQUET_2 parquet_2 P Tile.TILES tiles t Tile.TILES_2 tiles_2 T Tile.WATER water w blocking Tile.WATER_2 water_2 W blocking Tile.SPACE_BLUE space_blue s N/A Tile.SPACE_GREEN space_green S N/A"},{"location":"create_an_exercise/World/#tile-map","title":"Tile map","text":"<p>The tile map string is a convenient way of specifying what tiles to use. Each tile is specified using a code (see table in previous section), use <code>.</code> to mark gaps. To be able to add line breaks you will have to use triple <code>\"</code> for the strings. Or you can use the special sequence <code>\\n</code> instead of adding a line break. Leading and trailing whitespace is ignored, which allows indenting the tile maps.</p> Tile string from main section <p><pre><code>ex1 = \"gg\\nr\"\n# Equivalent to ex1\nex2 = \"\"\"\n    gg\n    r\n\"\"\"\n</code></pre> </p> Tile string using gaps <p><pre><code>ex3 = \"\"\"\n    .wr.\n    mrrg\n    mrgg\n    .rg.\n\"\"\"\n# Equivalent to ex3, but hard to read\nex4 = \"\"\".wr\nmrrg\n    mrgg\\n.rg\"\"\"\n</code></pre> </p>"},{"location":"create_an_exercise/World/#interactable-tiles","title":"Interactable tiles","text":"<p>Tiles can be interacted with using an on click listener. The callback function to this listener is given to the <code>WorldSetup.create_world</code> function.</p> Implementation of <code>on_tile_click</code> callback <pre><code>from lib.world import Tile \n\ndef on_tile_click(info: TileInfo) -&gt; None:\n    coord: tuple[int, int] = info.coordinate\n    name: str | Tile = info[\"name\"]\n    print(f\"Tile clicked: {name} at {coord}\")\n\nworld = self.setup.create_world(\n    tiles=self.tiles,\n    on_tile_click=on_tile_click,\n)\n</code></pre> <p>Note</p> <p>Depending on how the tile was instantiated <code>info[\"name\"]</code> can either be a string or a <code>Tile(StrEnum)</code>. If the tiles are generated using a <code>TileMap</code> the name in <code>TileInfo</code> will be a <code>Tile(StrEnum)</code>, but if instantiated using <code>World.add_tile({\"name\": \"tile_name\"})</code> the name in <code>TileInfo</code> till be the string <code>\"tile_name\"</code>.</p> <p>Error</p> <p>Interactable tiles do not work well in the isometric view. You can use <code>ImageActor</code> to circumvent this issue, see Using <code>ImageActor</code> to make interactable tiles for more info.</p>"},{"location":"create_an_exercise/World/#walls","title":"Walls","text":"<p>It is possible to place walls between tiles in the world, these will block movement between the tiles.</p> <p>While tiles are identified using a single coordinate, walls are identified using a pair of coordinates. The pair is the coordinates of the tiles the wall is placed between. E.g. if the wall should be placed between tiles <code>(0, 1)</code> and <code>(1, 1)</code> then the coordinate pair is <code>((0, 1), (1, 1))</code>.</p> <p>Like tiles, the library comes with prefabricated graphical walls and support for plain colored walls. And it is possible to make custom walls.</p> <p>Walls are added to the world in a similar way as tiles, except there is no equivalent to tile maps.</p> <p>First way is to include a <code>walls</code> argument to <code>setup.create_world()</code>. This takes the form of a dictionary with coordinate pairs as keys and walls as values:</p> Add walls using a dictionary <p><pre><code>world = setup.create_world(tiles={\n    ((0, 0), (1, 0)): \"hedge\",\n    ((0, 0), (0, 1)): \"stone\",\n})\n</code></pre> </p> <p>Second way is to use the <code>World</code> method:</p> <code>world.add_wall(coordinate_pair, data)</code> Where <code>data</code> depends on what types of walls you are using Add a single prefab wall <pre><code>world.add_wall(((0, 1), (1, 1)), {\"name\": \"hedge_2\"})\n</code></pre> <p>Or if using basic walls:</p> Add a single basic wall <pre><code>world.add_wall(((1, 0), (1, 1)), {\"color\": \"orange\", \"height\": 0.3})\n</code></pre> <p>It is possible to get wall data for a pair of coordinates using <code>world.get_wall_data(coordinate_pair)</code>.</p> <p>You can remove a wall using <code>world.remove_wall(coordinate_pair)</code>.</p>"},{"location":"create_an_exercise/World/#prefab-walls","title":"Prefab walls","text":"Constant Name Top down, face Top down, side Isometric, left Isometric, right Wall.BRICK brick Wall.BRICK_FENCE brick_fence Wall.HEDGE hedge Wall.HEDGE_2 hedge_2 Wall.PICKET_FENCE picket_fence Wall.PLAIN plain Wall.STONE stone"},{"location":"create_an_exercise/World/#block-corners","title":"Block corners","text":"<p>Due to the geometry of a square grid, you will generally only want to have visual walls between tiles in the cardinal directions. However, when allowing diagonal movement (e.g. using <code>directions=SQUARE_DIRECTIONS</code>) the characters can move diagonally across the corners. This will look incorrect and not make intuitive sense for the users.</p> <p>To solve this you can set <code>block_corners=True</code> in the <code>WorldSetup</code> or <code>World</code> constructors. This will automatically add invisible walls at the corners next to walls so that movement is blocked as expected.</p> <p>Note</p> <p>These walls must be manually removed if needed.</p>"},{"location":"create_an_exercise/World/#actors","title":"Actors","text":"<p>Everything that is not a tile or a wall is an <code>Actor</code>. This includes characters, objects, and even props like flowers.</p> <p>The easiest way to create actors is to use the <code>WorldSetup</code> methods (see following sections), but you can also create them manually if you need more flexibility.</p> <p>The <code>World</code> class has the following <code>Actor</code>-related methods:</p> <code>world.add_actor(coordinate, actor)</code> Places the actor in the world at the given coordinate. The actor will be configured to follow the movement rules of the world. Multiple actors can be placed on the same coordinate. <code>world.remove_actor(actor)</code> Removes the actor from the world. <code>world.find_actors()</code> Allows looking up actors based on various criteria, returns a list. If given no arguments it returns all actors in the world. The following arguments are supported: <code>at</code> - <code>tuple[int, int]</code> Coordinate (tile) to search at. Find actor at tile <code>(0, 0)</code> <pre><code>world.find_actors(at=(0, 0))\n</code></pre> <code>tags</code> - <code>set[str]</code> Tags the actor must have. Find actors with tag <code>\"my_tag\"</code> <pre><code>world.find_actors(tags={\"my_tag\"})\n</code></pre> <code>tags_match_any</code> - <code>bool</code> Only requires that one tag in <code>tags</code> matches. Find actors with either the <code>\"player\"</code> or <code>\"enemy\"</code> tag <pre><code>world.find_actors(tags={\"player\", \"enemy\"}, tags_match_any=True)\n</code></pre>"},{"location":"create_an_exercise/World/#attributes","title":"Attributes","text":"<p>All actors have a number of attributes that usually can be set when creating the actor:</p> <code>actor.coordinate</code> - <code>tuple[int, int] | None</code> The current coordinate of the actor, or <code>None</code> if the actor is not in a world. <code>actor.offset</code> - <code>tuple[float, float] | None</code> A visual offset on the current tile, mainly used to add small props (such as rocks and flowers). <code>actor.tags</code> - <code>set[str]</code> A set of tags for the actor, which are used in <code>world.find_actors</code> or other features. <code>actor.block_tags</code> - <code>set[str]</code> A set of tags this actor is blocked by. If a space has an actor with any of these tags, then this actor can not move there."},{"location":"create_an_exercise/World/#deletion","title":"Deletion","text":"<p>All actors have the <code>actor.delete()</code> method with will ask for the actor to be removed from existence, such as the world or a container. If the actor was rendered manually, this will have no effect.</p>"},{"location":"create_an_exercise/World/#movement","title":"Movement","text":"<p>This library has a pathing system which enables actors to find the quickest path from point a to point b.</p> <p>In order for this system to work, you must call <code>world.update_world_graph()</code>. This should be done after finishing setting up the world, and when you have modified any tiles or walls.</p> <p>Actors have a set of methods related to movement:</p> <code>actor.can_move(direction)</code> Returns <code>True</code> if the actor currently can move in the given direction. <code>actor.move(direction)</code> Moves the actor one step in the given direction. Does not require movement to be properly set up. Move <code>actor</code> one tile to the left <pre><code>actor.move(Cardinal.LEFT)\n</code></pre> <code>actor.move(direction, check=True)</code> Same as above, but includes additional checks (such as blocked check). Returns <code>False</code> if the movement failed. Requires movement to be properly set up. Attempt to move <code>actor</code> one tile to the left <pre><code>actor.move(Ordinal.LEFT_DOWN, check=True)\n</code></pre> <code>actor.possible_moves()</code> Returns the possible directions this actor can move (currently). <code>actor.next_move_towards(coordinate)</code> Returns the current direction the actor should move to get one step closer to the given coordinate along a shortest path. Returns <code>None</code> if there is no path to to coordinate or if the actor is already there. <code>actor.move_towards(coordinate)</code> Moves the actor one step towards the given coordinate along a shortest path. Returns <code>False</code> if the movement failed or the actor is already there. Move <code>actor</code> one step towards tile <code>(3, 4)</code> <pre><code>actor.move_towards((3, 4))\n</code></pre> <p>You can have a callback trigger whenever the actor performs a successful movement, by supplying the following argument when creating an actor:</p> <code>on_move</code> - <code>(ActorMoveEventData) -&gt; None</code> Callback to call when the actor successfully moves (one step) The <code>ActorMoveEventData</code> object has the following attributes: <code>source</code> - <code>Actor</code> The actor that moved <code>direction</code> - <code>tuple[int, int]</code> The direction the actor moved <code>origin</code> - <code>tuple[int, int]</code> The coordinate the actor came from"},{"location":"create_an_exercise/World/#keyboard-input","title":"Keyboard Input","text":"<p>This library has a keyboard input system which enables users to use the keyboard to move actors or perform other actions.</p> <p>When creating an actor you can supply the following arguments:</p> <code>key_map</code> - <code>dict[str, tuple[int, int] | (ActorKeyboardEventData) -&gt; None] | None</code> Maps keys to movements and/or callbacks. <code>on_key_up</code> - <code>(ActorKeyboardEventData) -&gt; None</code> Callback to call if the key is not found in the key map. The <code>ActorKeyboardEventData</code> object has the following attributes: <code>source</code> - <code>Actor</code> The actor that received the key event <code>key</code> - <code>str</code> The key value <p>We supply a default keymap for cardinal movement called <code>MOVE_KEY_MAP</code> which supports arrow keys and W A S D movement.</p> Using default movement for a main character <pre><code>world.add_actor((0, 0), setup.create_character(\"skilly\", \"blue\", key_map=MOVE_KEY_MAP))\n</code></pre> Adding an additional action when pressing P <pre><code>world.add_actor((0, 0), setup.create_character(\"skilly\", \"orange\", key_map=MOVE_KEY_MAP | {\"p\": lambda e: e.source.pick_up()}))\n</code></pre> Printing the value when a key is pressed <pre><code>world.add_actor((0, 0), setup.create_character(\"skilly\", \"orange\", on_key_up=lambda e: print(e.key)))\n</code></pre>"},{"location":"create_an_exercise/World/#interaction","title":"Interaction","text":"<p>This library has an interaction system with allows responding to mouse clicks or can be used with keyboard input or just through code.</p> <p>Actors have a set of methods related to interaction:</p> <code>actor.interact()</code> Invokes the actors <code>on_interact</code> callback. <code>actor.interact(agent=agent)</code> Invokes the actors <code>on_interact</code> callback, specifying the interaction agent (must be an <code>Actor</code>). <p>When creating an actor you can supply the following arguments:</p> <code>on_interact</code> - <code>(ActorInteractEventData) -&gt; None</code> Callback to call when this actor is interacted with. <code>interact_on_click</code> - <code>bool</code> If set to <code>True</code>, <code>on_interact</code> will be called when the user clicks on this actor. <p>The <code>ActorInteractEventData</code> object has the following attributes:</p> <code>source/target</code> - <code>Actor</code> The actor that received the key event <code>agent</code> - <code>Actor | None</code> The actor that caused the event, set to <code>None</code> if not caused by another actor (such as clicked by user). <p>Some prefab actors have predefined <code>on_interact</code> callbacks, which can be overridden and are detailed under their respective section.</p>"},{"location":"create_an_exercise/World/#characters","title":"Characters","text":"<p>Character actors have a few extra features and, most importantly, are animated. The characters will automatically get appropriate walking animations based on movement, and there are a couple of additional actions with dedicated animations.</p> <p>When you call <code>world.render_changes()</code> the appropriate animation will be chosen. If you want to perform multiple movements or actions, you have to use <code>canvas.split_step()</code> and call <code>world.render_changes()</code> multiple times.</p> <p>Like with props, there is a dedicated method to create a character <code>setup.create_character(name, color)</code>.  Available characters and colors are listed in the following tables:</p> Constant Name Description Top down Isometric Character.ADA ada a girl Character.DOUGLAS douglas a dog Character.KATNISS katniss a cat Character.RUST rust a boy Character.SKILLY skilly a robot Constant Name CharacterColor.BLACK black CharacterColor.BLUE blue CharacterColor.ORANGE orange CharacterColor.RED red CharacterColor.WHITE white CharacterColor.YELLOW yellow <p>Character actors have an additional set of methods with animations:</p> <code>actor.pick_up()</code> Interacts with any other actors on the current tile, and plays a picking up animation. <code>actor.gesture(direction)</code> Plays a gesturing animation in the given direction. Make <code>actor</code> gesture facing down <pre><code>actor.gesture(Cardinal.DOWN)\n</code></pre> <code>actor.say(text)</code> Plays a speaking animation and shows a speech bubble with the given text. Make <code>actor</code> say \"Hello World!\" <pre><code>actor.say(\"Hello World!\")\n</code></pre> <p>Additional optional parameters:</p> <code>font_size</code> Adjust the font size for the bubble. <code>theme</code> See speech bubble documentation. <code>actor.interact_with(dir=dir)</code> Interacts with any actors on the tile in the specified direction, and plays a gesturing animation."},{"location":"create_an_exercise/World/#props","title":"Props","text":"<p>Prop actors are simply prefabricated actors that can be placed in the world. It is up to you to decide how to use them.</p> <p>Props are created using <code>setup.create_prop(name)</code> which also accepts various <code>Actor</code> and <code>Image</code> attributes. The available prefab props are listed in the following table:</p> Constant Name Notes Top down Isometric Container.BARREL barrel container Container.BARREL_SIDE barrel_side container Container.CHEST chest container Container.CHEST_BAND chest_band container Container.CRATE crate container Container.CRATE_TALL crate_tall container Item.COIN coin item Item.HEART heart item Item.KEY key item Item.STAR star item Prop.BUSH bush Prop.FLOWER flower Prop.FLOWER_2 flower_2 Prop.STONE stone Prop.STONE_2 stone_2 Prop.TREE tree Prop.TREE_STONES tree_stones <p>Smaller props such as flowers and stones can preferably be added as cosmetic scenary to world, with an offset from the center. Here is an example where a couple of stones and flowers are added:</p> Add a couple of stones and flowers to the world <p><pre><code>scenary = [\n    (\"stone\", (0, 0), (-0.3, 0)),\n    (\"flower\", (0, 0), (0.3, 0.4)),\n    (\"stone\", (1, 0), (0.2, -0.4)),\n]\nfor name, coord, offset in scenary:\n    world.add_actor(coord, setup.create_prop(name, offset=offset))\n</code></pre> </p> <p>Bigger props should generally be used without an offset to avoid intersecting walls and characters. You would generally also want to give the bigger props a tag that can be used to block movement.</p> Add a prop with a tag to the world <pre><code>world.add_actor((0, 2), setup.create_prop(\"bush\", tags={\"obstacle\"}))\n</code></pre> <p>The props marked as <code>container</code> or <code>item</code> can be used as normal props, but if you want to have them be opened/broken, then you should take a look at the containers section or items section.</p>"},{"location":"create_an_exercise/World/#containers","title":"Containers","text":"<p>Container actors are created using the method <code>setup.create_container(name)</code> with one of the names marked as <code>Container</code> in the props table.</p> <p>The containers feature a very lightweight inventory system where <code>ItemActor</code> objects can be \"stored\" inside the container. When the container is opened, the first of these items will be displayed on/inside the container.</p> <p>By default, when interacting with the container it will (1) be opened if closed, or (2) the first contained item will be interacted with (usually leading to it being removed, depending on the item itself).</p> <p>Containers have the following extra attributes:</p> <code>actor.items</code> - <code>list[ItemActor]</code> List of items contained within the container, readonly <code>actor.opened</code> - <code>bool</code> Whether the container currently is opened/broken or not, readonly <p>And the following extra methods:</p> <code>actor.add_item(item)</code> Adds the given item to the container (at the end) <code>actor.remove_item(item)</code> Removes the given item from the container <code>actor.open()</code> Opens/breaks the container <code>actor.close()</code> Closes/un-breaks the container <p>The containers have animations that play when they open/break, and then they will keep the open/broken appearance. They can then be closed, but there currently are no animations playing for this action.</p>"},{"location":"create_an_exercise/World/#items","title":"Items","text":"<p>Item actors are created using the method <code>setup.create_item(name)</code> with one of the names marked as <code>Item</code> in the props table.</p> <p>By default, when interacting with an item any <code>on_pick_up</code> callbacks will be called and then the item will be deleted. If the <code>on_pick_up</code> callback returns <code>True</code>, then the item will not be deleted. This default behaviour can be overridden by setting <code>on_interact</code> manually, however, it is usually better to just set <code>on_pick_up</code>.</p> <p>Items have the following extra attributes:</p> <code>actor.hidden</code> - <code>bool</code> Whether the item currently is hidden or not, readonly <p>And the following extra methods:</p> <code>actor.reveal()</code> Reveals the item <code>actor.hide()</code> Hides the item <code>actor.pick_up()</code> Manually invoke the items <code>on_pick_up</code> callback, with the same behaviour as default interaction <p>The items have animations that play when they are revealed. They can then be hidden, but there currently are no animations playing for this action.</p>"},{"location":"create_an_exercise/World/#debugging","title":"Debugging","text":"<p>The world element has a subtle menu on the top left which can be used to activate various visualizations:</p> <code>(x, y)</code> - coordinates Shows coordinates for all tiles, which can greatly help when placing actors or writing solutions. Always available. <code>nav</code> - navigation Visualization of the pathfinding graph, does not take into account blocking tags. Requires debug mode."},{"location":"create_an_exercise/World/#custom-prefabs","title":"Custom Prefabs","text":"<p>It is possible to extend the existing list of prefabs with your own additions. This is not trivial and only recommended if you are well versed in the Freecode platform and have some image editing experience (you will have to provide your own images in a particular format).</p> <p>Although you can create your own prefab manager, you would generally just register them with the <code>DEFAULT_PREFAB_MANAGER</code> which is used by default. Just keep in mind that it is better to add new entries rather than overriding existing ones. There is no way to add new values to the enums, so you will have to only use the strings directly (or define your own string enum, or use constants).</p> <p>For each prefab type, the manager has a corresponding <code>.register_</code><code>s(entry_1, entry_2, ...)</code> method (e.g. <code>.register_items(...)</code>). It can be used to register one or more prefab entries. The entries are instances of the corresponding <code>&lt;Type&gt;Entry</code> classes for the prefab types (e.g. <code>ItemEntry</code>). <p>Note</p> <p>If you register any prop variant (such as container or item) a corresponding prop entry will automatically be created for you.</p> <p>The entry instance allows you to tweak a number of parameters which will be used to determine the image names, positioning, and more. The following subsections detail what parameters exist and what they do, as well as what image names are expected.</p> <p>Note</p> <p>Images must be provided in WebP, which should be supported by most modern image editors.</p> <p>Note</p> <p>You need to import <code>DEFAULT_PREFAB_MANAGER</code> and any <code>&lt;Type&gt;Entry</code> classes you plan on using from <code>lib.world.prefab</code>.</p>"},{"location":"create_an_exercise/World/#tileentry","title":"<code>TileEntry</code>","text":"<code>name</code> - <code>str</code> The name to be used to refer to this prefab. Required and must be unique within the prefab category (will otherwise override the others). <code>image</code> - <code>str | None</code> (default <code>None</code>) An alternative name to use for determining the image name. <code>animated</code> - <code>bool</code> (default <code>False</code>) Whether the prefab is animated or not. Animations requires an additional sprite sheet json file. <code>code</code> - <code>str | None</code> (default <code>None</code>) A code to be used in tile maps. Must be exactly one character. <code>color</code> - <code>str</code> (default <code>\"magenta\"</code>) The color to use when <code>basic</code> mode is enabled. <code>blocked</code> - <code>bool</code> (default <code>False</code>) Whether the tile should be considered blocked for movement. <p>Tile images are named <code>&lt;perspective&gt;_tile_&lt;name&gt;.webp</code>.</p> Add a custom top down grass tile <p>Upload an image called <code>td_tile_grass.webp</code> to the Freecode creator, then add the tile like this: <pre><code>DEFAULT_PREFAB_MANAGER.register_tiles(TileEntry(name=\"grass\"))\nself.world.add_tile((0, 0), {\"name\": \"grass\"})\n</code></pre></p> <p>Note</p> <p>It is important to get the right size, aspect ratio, etc when making a tile image. This can be difficult, especially when working in an isometric view.</p> <p>The easiest way to ensure that the tile image will work properly is to use a prefab tile image as a base and draw the custom tile on top of it.</p>"},{"location":"create_an_exercise/World/#wallentry","title":"<code>WallEntry</code>","text":"<code>name</code> - <code>str</code> The name to be used to refer to this prefab. Required and must be unique within the prefab category (will otherwise override the others). <code>image</code> - <code>str | None</code> (default <code>None</code>) An alternative name to use for determining the image name. <code>animated</code> - <code>bool</code> (default <code>False</code>) Whether the prefab is animated or not. Animations requires an additional sprite sheet json file. <code>color</code> - <code>str</code> (default <code>\"magenta\"</code>) The color to use when <code>basic</code> mode is enabled. <code>height</code> - <code>float</code> (default <code>0.5</code>) The height of the wall when <code>basic</code> mode is enabled. <p>Wall images are named <code>&lt;perspective&gt;_wall_&lt;name&gt;_&lt;direction&gt;.webp</code>. Directions for topdown are <code>face</code> and <code>side</code>, and directions for isometric are <code>left</code> and <code>right</code>.</p> Add a custom isometric stone wall <p>Upload two images called <code>iso_wall_stone_left.webp</code> and <code>iso_wall_stone_right.webp</code> to the Freecode creator, then add the wall like this: <pre><code>DEFAULT_PREFAB_MANAGER.register_walls(WallEntry(name=\"stone\"))\nself.world.add_wall(((0, 0), (0, 1)), {\"name\": \"stone\"})\n</code></pre></p> <p>Note</p> <p>While not as important as with tiles, it can still be nice to get a perfectly aligned wall. Just as with tiles, it is easiest to ensure this by using a prefab wall image as a base and draw the custom wall image on top of it.</p>"},{"location":"create_an_exercise/World/#characterentry","title":"<code>CharacterEntry</code>","text":"<code>name</code> - <code>str</code> The name to be used to refer to this prefab. Required and must be unique within the prefab category (will otherwise override the others). <code>image</code> - <code>str | None</code> (default <code>None</code>) An alternative name to use for determining the image name. <code>colors</code> - <code>set[str]</code> (default <code>set(CharacterColor)</code>) The set of supported colors for the character. <code>size</code> - <code>tuple[float, float]</code> (default <code>(1, 1)</code>) The size of the prefab, in world units. <code>center_offset</code> - <code>tuple[float, float]</code> (default <code>(0, 0)</code>) Offset from the center of the image to the center of the prefab footprint. <code>face_offset</code> - <code>tuple[float, float]</code> (default <code>(0, 0)</code>) Offset from the center of the image to the center of the character face. <p>Character sprite sheets are named <code>&lt;perspective&gt;_&lt;name&gt;_&lt;color&gt;_&lt;action&gt;.webp</code>. See Create Sprite Sheet for instructions for creating sprite sheets.</p> <p>Color options are: <code>black</code>, <code>blue</code>, <code>orange</code>, <code>red</code>, <code>white</code>, and <code>yellow</code>.</p> <p>Action options are: <code>gesture</code>, <code>gesture_away</code>, <code>idling</code>, <code>idling_away</code>, <code>picking</code>, <code>walking</code>, and <code>walking_away</code>.</p> Add a custom topdown character called Kim associated with the color blue <p>Upload all the necessary sprite sheets on the pattern <code>td_kim_blue_&lt;action&gt;.webp</code> to the Freecode creator, then add the character like this: <pre><code>DEFAULT_PREFAB_MANAGER.register_characters(CharacterEntry(name=\"kim\", colors={\"blue\"}))\nkim = self.setup.create_character(\"kim\", \"blue\")\nself.world.add_actor((0, 0), kim)\n</code></pre></p>"},{"location":"create_an_exercise/World/#propentry","title":"<code>PropEntry</code>","text":"<code>name</code> - <code>str</code> The name to be used to refer to this prefab. Required and must be unique within the prefab category (will otherwise override the others). <code>image</code> - <code>str | None</code> (default <code>None</code>) An alternative name to use for determining the image name. <code>animated</code> - <code>bool</code> (default <code>False</code>) Whether the prefab is animated or not. Animations requires an additional sprite sheet json file. <code>size</code> - <code>tuple[float, float] | dict[str, tuple[float, float]]</code> (default <code>(1, 1)</code>) The size of the prefab, in world units. Can give a dictionary to have different values based on perspective. <code>center_offset</code> - <code>tuple[float, float] | dict[str, tuple[float, float]]</code> (default <code>(0, 0)</code>) Offset from the center of the image to the center of the prefab footprint. Can give a dictionary to have different values based on perspective. <code>prespective</code> - <code>str | None</code> (default <code>None</code>) If set, override with the given perspective when determining the image name. <p>Prop images are named <code>&lt;perspective&gt;_prop_&lt;name&gt;.webp</code>.</p> Add a custom isometric coffee prop <p>Upload an image called <code>iso_prop_coffee.webp</code> to the Freecode creator, then add the prop like this: <pre><code>DEFAULT_PREFAB_MANAGER.register_props(PropEntry(name=\"coffee\"))\nself.world.add_prop((0, 0), {\"name\": \"coffee\"})\n</code></pre></p> <p>Note</p> <p>The perspective must match if a particular perspective was forced.</p>"},{"location":"create_an_exercise/World/#containerentry","title":"<code>ContainerEntry</code>","text":"<p>Same fields as <code>PropEntry</code>, with the following additions:</p> <code>item_offset</code> - <code>tuple[float, float] | dict[str, tuple[float, float]]</code> (default <code>(0, 0)</code>) Offset from the center of the footprint of the container to the center of the footprint of the showcased item. Can give a dictionary to have different values based on perspective. <p>Containers follow the same naming as props, except that the base image should be the open animation. An image suffixed with <code>_closed</code> will be used for the default state and an image suffixed with <code>_opened</code> will be used for the opened state.</p>"},{"location":"create_an_exercise/World/#itementry","title":"<code>ItemEntry</code>","text":"<p>Same fields as <code>PropEntry</code>.</p> <p>Items follow the same naming as props. An image suffixed with <code>_spawn</code> will be used for the reveal animation.</p>"},{"location":"create_an_exercise/World/#imageactor","title":"<code>ImageActor</code>","text":"<p>While <code>ImageActor</code> is not a custom prefab, it can sometimes be used as one. As the name implies it is an <code>Actor</code>, that takes the name of an uploaded or built in image or sprite with the corresponding parameter name <code>image</code> or <code>sprite</code>.</p> <p>Additionally it has the following optional parameters:</p> <code>size</code> - <code>tuple[float, float]</code> (default <code>(1, 1)</code>) The size of the <code>ImageActor</code>, in world units. <code>animation</code> - <code>str</code> (default <code>\"default\"</code>) The name of the animation to be used for the sprite, if applicable. <code>image_offset</code> - <code>tuple[float, float]</code> (default <code>(0, 0)</code>) Offset from the center of the image/sprite to the center of the <code>ImageActor</code>'s footprint. <code>flipped</code> - <code>bool</code> (default <code>False</code>) Determines if the image/sprite should be flipped."},{"location":"create_an_exercise/World/#using-imageactor-to-make-interactable-tiles","title":"Using <code>ImageActor</code> to make interactable tiles","text":"<p>You can use <code>ImageActor</code> to make a button that can be placed on a tile in the <code>World</code>. This is useful if you want to highlight the tiles that a player can interact with in interact mode, or if you are using the isometric view where interactable tile do not work. This example will use <code>ButtonActor</code>, which is a child of <code>ImageActor</code>, see code below.</p> Code for our <code>ButtonActor</code> <pre><code>class ButtonActor(ImageActor):\n    def __init__(self, callback, coords):\n        ImageActor.__init__(self, image = \"Button.png\")\n        self.callback = callback\n        self.coords = coords\n        self.default_opacity = 0.5\n\n    def _render_new(self, resolution: int) -&gt; BaseElement:\n        button_size = 1\n        args = {\n            \"size\": mulv((button_size, button_size), resolution),\n            \"on_click\": lambda _: self.callback(self.coords)\n        }\n        self.image = Image(\"Button.png\", **args)\n        self.image.opacity = self.default_opacity\n        return self.image\n\n    def show(self, do_show):\n        self.image.opacity = self.default_opacity if do_show else 0\n</code></pre> <p>To get this example to work you will also need to upload an image to act as the button. This image does not need to be visible for the <code>ButtonActor</code> to work, you can set <code>self.default_opacity = 0</code>, but you need a picture. It is recommended that the image is as tight as possible, and a bit smaller than a tile, to ensure that there is as little overlap between the buttons as possible.</p> <p>The next step is to add <code>ButtonActor</code>s to all tiles that you want the player to interact with.</p> Adding <code>ButtonActor</code> to some tiles <pre><code>for x in range(3):\n    for y in range(3):\n        coord = (x, y)\n        button_interact = lambda c: print(f\"Interacted with tile on {c}!\")\n        button = ButtonActor(button_interact, coord)\n        self.world.add_actor(coord, button)\n</code></pre> <p>That is all you need to do to use an <code>ImageActor</code> to make interactable tiles!</p>"},{"location":"create_an_exercise/World/#templates","title":"Templates","text":"<p>The following template is a bit rough around the edges and might not always showcase best practices.</p> <p>This template showcases how the world library can be used together with the <code>GameChallenge</code> skeleton:</p> <pre><code>\"\"\"\nThis is the module containing the challenge implementation.\n\"\"\"\nfrom lib.exceptions import SolutionException\nfrom lib.skeletons import LevelInfo, GameChallenge, GameInfo, PlayerInfo, StatisticInfo\nfrom lib.world import MOVE_KEY_MAP, WorldSetup\n\n\n# NOTE: only needed due to a bug\nclass HumanAdapter:\n    pass\n\n\nclass Challenge(GameChallenge):\n    \"\"\"\n    This is a challenge implementation using the game skeleton and the world library.\n    \"\"\"\n\n    def setup_game(self):\n        \"\"\"\n        This method returns required game information for setting up the challenge.\n        \"\"\"\n        # The info prompt shows up in the bottom left corner in interact mode\n        self.info_prompt = \"Move using WASD or arrow keys\"\n        # We don't use the turn system, this change is just cosmetic\n        self.auto_finish_turn = True\n        return GameInfo(\n            title=\"\",\n            summary=\"\",\n            description=\"\",\n        )\n\n    def setup_players(self):\n        \"\"\"\n        This method returns a list with required information for each player.\n        \"\"\"\n        return [PlayerInfo(\n            role=\"Player\",\n            name=\"Your solution\",\n            image=\"TODO\",\n        )]\n\n    def setup_info_panel(self):\n        return None\n\n    def setup_tabs(self):\n        return None\n\n    # Disable the auto-finish turn setting\n    def setup_settings(self):\n        return []\n\n    def setup_level(self, level):\n        \"\"\"\n        This method returns required level information for the current level.\n        The \"level\" parameter is the level index, starting at 0.\n        \"\"\"\n        match level:\n            case 0:\n                name = \"Right down the path\"\n                self.tiles = \"\"\"\n                    rrrrr\n                    GGGGr\n                    GGGGr\n                    GGGGr\n                    GGGGr\n                \"\"\"\n                self.walls = {}\n                self.path_length = 8\n            case 1:\n                name = \"Not straight-farward\"\n                self.tiles = \"\"\"\n                    rrrGb\n                    mmrGb\n                    mrrGb\n                    mrGGG\n                    mrrrr\n                \"\"\"\n                self.walls = {}\n                self.path_length = 10\n            case 2:\n                name = \"Walls as well\"\n                self.tiles = \"\"\"\n                    rrmmm\n                    grrrm\n                    grrrm\n                    grrrm\n                    wwwrr\n                \"\"\"\n                self.walls = {\n                    ((1, 1), (2, 1)): \"stone\",\n                    ((1, 2), (2, 2)): \"stone\",\n                    ((2, 2), (3, 2)): \"hedge\",\n                    ((2, 3), (3, 3)): \"hedge\",\n                    ((4, 3), (4, 4)): \"picket_fence\",\n                }\n                self.path_length = 12\n            case 3:\n                name = \"Not so square\"\n                self.tiles = \"\"\"\n                    rGGGb\n                    rrr.g\n                    .mrrr\n                    ..mrr\n                    ...rr\n                \"\"\"\n                self.walls = {\n                    ((3, 2), (3, 3)): \"hedge_2\",\n                    ((4, 3), (4, 4)): \"brick_fence\",\n                }\n                self.path_length = 10\n            case _:\n                raise Exception(f\"level {level} not supported\")\n        return LevelInfo(name=name, max_score=10)\n\n    def setup_state(self):\n        \"\"\"\n        This method is where you should do all initial setup, except for graphics.\n        \"\"\"\n        # We first need to create the world setup, in this case we just use the default\n        self.setup = WorldSetup()\n        # Create the world using the tiles and walls assigned for the level\n        self.world = self.setup.create_world(tiles=self.tiles, walls=self.walls)\n        # Needed to enable movement\n        self.world.update_world_graph()\n        # Create the player character with standard movement controls and a movement callback\n        self.player_character = self.setup.create_character(\"rust\", \"red\", key_map=MOVE_KEY_MAP, on_move=self.move_callback)\n        # Add the player to the world at the starting position\n        self.world.add_actor((0, 0), self.player_character)\n        # Keep track of how many steps the player has taken\n        self.step_count = 0\n\n    def setup_view(self):\n        \"\"\"\n        This method returns the main view for the challenge, which can be any graphics element.\n        \"\"\"\n        # We want the world to be resized to fit the designated area\n        # For a bigger world we would want to use \"render_scrollable\"\n        return self.world.render_resizable()\n\n    def update_state(self):\n        \"\"\"\n        This method is where you should call solutions and update the current state.\n        It is called continuously until `self.finished` is set to \"True\".\n        \"\"\"\n        # When calling a solution you need to handle any \"SolutionException\"\n        try:\n            solution = self.context.solutions[0]\n            # TODO: call a solution method\n        except SolutionException:\n            # Code put here will run if the solution crashed\n            pass\n        self.finished = True\n\n    def update_view(self):\n        \"\"\"\n        This method is where you should update the view based on the current state.\n        \"\"\"\n        # Need to trigger rendering of any changes\n        self.world.render_changes()\n\n    # We add this method to be called whenever the player character moves\n    def move_callback(self, event):\n        # If the player takes too many steps they will lose points\n        self.step_count += 1\n        if self.step_count &gt; self.path_length:\n            self.players[0].points -= 1\n        # If the player moves off the path they will lose points\n        tile_data = self.world.get_tile_data(self.player_character.coordinate)\n        match tile_data[\"name\"]:\n            # On the path, do not deduct points\n            case \"gravel\":\n                pass\n            # Walked on mud, deduct double points\n            case \"mud\":\n                self.players[0].points -= 2\n            # Matches any other tile\n            case _:\n                self.players[0].points -= 1\n        # If the player has reached the end, we stop the run\n        if self.player_character.coordinate == (4, 4):\n            self.finished = True\n            self.info_prompt = \"You made it to the end of the path!\"\n        # We can update the scores here\n        self.scores[0] = self.players[0].points\n</code></pre>"},{"location":"future_skill_gpt/Future_skill_gpt/","title":"Future Skill GPT Instructions","text":"<p>To create exercises quick and more efficient Future Skill GPT can be used. It is based on the original GPT but provided with specific data that helps to create parts of the exercise in an effecient way. You can access it using the link below:</p> <p>Future Skill GPT</p>"},{"location":"future_skill_gpt/Future_skill_gpt/#using-the-custom-gpt-to-create-exercises","title":"Using the Custom GPT to Create Exercises","text":"<p>When creating exercises or challenges, there are two possible structures:</p> <ul> <li> <p>With a topic \u2192 The exercise or challenge is part of a course and linked to its theory/flow.</p> </li> <li> <p>Without a topic \u2192 The exercise or challenge stands alone, not connected to any course, and has no associated theory/flow.</p> </li> </ul>"},{"location":"future_skill_gpt/Future_skill_gpt/#commands","title":"Commands","text":"<ul> <li> <p>Create an exercise or challenge for  <li> <p>Provide an explanation of the exercise</p> </li> <li> <p>Add a UI description (or let GPT generate one using the provided samples)</p> </li> <li> <p>Create an exercise or challenge without a topic</p> </li> <li> <p>Provide an explanation of the exercise</p> </li> <li>Add a UI description (or let GPT generate one using the provided samples)</li>"},{"location":"legacy/Freecode_graphics/","title":"Macro Rendering Error","text":"<p>File: <code>legacy/Freecode_graphics.md</code></p> <p>UndefinedError: 'dict object' has no attribute 'width'</p> <pre><code>Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/mkdocs_macros/plugin.py\", line 688, in render\n    return md_template.render(**page_variables)\n           ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 158, in top-level template code\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 490, in getattr\n    return getattr(obj, attribute)\njinja2.exceptions.UndefinedError: 'dict object' has no attribute 'width'\n</code></pre>"},{"location":"legacy/Implementation/","title":"Implementation","text":"<p>This article goes through most of the information that one needs to write an implementation for executor version 3. It contains sections about API details, sections about best practices, and some example code tests and challenges to get a complete picture. It does not cover the challenge editor and its options, neither does it cover the canvas API.</p> <p>Read more general information about the freecode creator here: Freecode creator</p> <p>Read more information about the graphical canvas here: Freecode graphics</p> <p>Read more information about the different challenge here: Skeletons</p>"},{"location":"legacy/Implementation/#the-challenge-class","title":"The Challenge class","text":"<p>The Challenge class is initialized with a context object and once initialization is done the step function will be called continuously until the challenge is completed.</p>"},{"location":"legacy/Implementation/#the-context-object","title":"The context object","text":"<p>The context object given in the Challenge constructor contains data for the current run and has some additional useful functionality. This section goes through them in detail.</p>"},{"location":"legacy/Implementation/#level-int","title":"level: int","text":"<p>The current challenge level.</p>"},{"location":"legacy/Implementation/#is_interact_mode-bool","title":"is_interact_mode: bool","text":"<p>Returns True when the canvas is running in interact mode</p>"},{"location":"legacy/Implementation/#canvas","title":"canvas","text":"<p>An object that is used to interact with the canvas. It is used to add new graphical elements, more details on them are covered by another document. It is best practice to only modify the canvas in dedicated setup and update methods (by default <code>_setup_canvas</code> and <code>_update_canvas</code>).</p>"},{"location":"legacy/Implementation/#width-float","title":"width: float","text":"<p>Returns the total width of the canvas in coordinate units.</p>"},{"location":"legacy/Implementation/#height-float","title":"height: float","text":"<p>Returns the total height of the canvas in coordinate units.</p>"},{"location":"legacy/Implementation/#console","title":"console","text":"<p>An object that is used to interact with the <code>console</code>. It has two methods: <code>log</code> and <code>debug</code>. The <code>log</code> method acts similar to print and prints the arguments to the <code>console</code> for all players. The <code>debug</code> method acts identically except it only prints when inside the challenge editor.</p> <p>Some example of how to use the console can be found here.</p>"},{"location":"legacy/Implementation/#solutions-list","title":"solutions: list","text":"<p>The list of solutions partaking in the challenge together for this level. There are more details on the solution objects later in this document. This list will always be the same length as the number of solutions. However, they will all be set to None when generating the initial state of the canvas (this affects the Challenge constructor, not the step method).</p>"},{"location":"legacy/Implementation/#parallel","title":"parallel","text":"<p>An object that acts as a proxy solution for making parallel solution calls. It has the candidate methods specified in the API specification, but not the solution attributes. More details about calling solutions in parallel is available in a later section.</p>"},{"location":"legacy/Implementation/#living_solutions","title":"living_solutions","text":"<p>A method that generates index-solution pairs for each living solution (solutions that have not crashed or timed out). This is the recommended way to iterate through solutions in the step method.</p>"},{"location":"legacy/Implementation/#the-solution-objects","title":"The solution objects","text":"<p>The solution objects contain information about the solutions partaking in the challenge level and is a way to call candidate methods on the solutions. The solutions objects have the candidate methods specified in the API specification which is used to call the solution and get a result. Calling a solution may result in a <code>SolutionException</code> (imported from <code>lib.exceptions</code>) which must be caught (the solution is no longer alive at that point). Note that the challenge must not call a candidate method on a crashed solution. The solution objects also have the following attributes.</p>"},{"location":"legacy/Implementation/#name-str","title":"name: str","text":"<p>The name of the solution. This will either be the player name or a placeholder name.</p>"},{"location":"legacy/Implementation/#index-int","title":"index: int","text":"<p>The index of the solution. This should be used to identify a solution.</p>"},{"location":"legacy/Implementation/#console_1","title":"console","text":"<p>An individual console for the solution. The interface is identical to the global console except that it limits the output to the console of the specific solution.</p>"},{"location":"legacy/Implementation/#alive-bool","title":"alive: bool","text":"<p>A flag indicating if the solution is still running or has crashed/timed out.</p>"},{"location":"legacy/Implementation/#what-to-do-in-the-challenge-constructor","title":"What to do in the Challenge constructor","text":"<p>The challenge constructor should do the following things (preferably in this order):</p> <ul> <li> <p>Store the context and select the appropriate level configuration.</p> </li> <li> <p>Initialise the required challenge attributes.</p> </li> <li> <p>Initialise any additional variables used for the run.</p> </li> <li> <p>Setup the canvas.</p> </li> </ul> <p>The constructor should not:</p> <ul> <li>Call any solution methods (neither individual, nor in sequence or in parallel).</li> </ul> <p>Note that the step method is not guaranteed to be called before the solutions call the API methods on the challenge, so any preparations needed for the API methods must be done in the constructor.</p>"},{"location":"legacy/Implementation/#what-to-do-in-the-step-method","title":"What to do in the step method","text":"<p>The step method should do the following things:</p> <ul> <li> <p>Call any solution methods (either individual, in sequence, or in   parallel).</p> </li> <li> <p>Update any variables, etc.</p> </li> <li> <p>Update the scores.</p> </li> <li> <p>Update the canvas.</p> </li> <li> <p>If appropriate, mark the challenge as finished.</p> </li> </ul> <p>It is important that the step method catches any <code>SolutionExceptions</code> raised when calling the solutions. The examples include best practices for handling solution calls (especially note how the Code test example handles multiple calls on the same solution).</p>"},{"location":"legacy/Implementation/#making-parallel-solution-calls","title":"Making parallel solution calls","text":"<p>Calling the solutions in parallel is preferable if the challenge supports it (i.e. the actions of one solution does not affect any other solution until all solutions have acted). To call solutions in parallel the <code>context.parallel</code> object should be used instead of the solution objects themselves.</p> <p>The results of a parallel call is a dictionary with solution indices as keys and the solution result as value. There is no need to catch <code>SolutionException</code> when making parallel calls. Only solutions that lived before making the call are included in the dictionary. The solution result is either a the return value from the solution or a <code>SolutionException</code> if the solution crashed, therefore it is necessary to make an isinstance check on the result (unless the return value is not needed).</p> <p>The differences between sequential and parallel solution calls are highlighted in the Challenge and Parallel challenge examples.</p>"},{"location":"legacy/Implementation/#the-api-methods","title":"The API methods","text":"<p>The challenge should have methods matching the API methods in the API specification. These methods should take a solution object as its second argument. This solution object corresponds to the solution that called this API method.</p> <p>Sometimes an API method has additional restrictions on its arguments. If this is the case then they should be thoroughly documented in the challenge/test description. In the API method a specific check should be put in place where a <code>SolutionException</code> (imported from <code>lib.exceptions</code>) with an appropriate message should be raised. This will terminate that solution, taking it out from the challenge from then on.</p>"},{"location":"legacy/Implementation/#the-challenge-attributes","title":"The Challenge attributes","text":"<p>There are a couple of required attributes for a challenge, these must be set in the constructor as they are used continuously throughout the challenge run. They are listed here, together with the required type and a short summary of how it is used.</p>"},{"location":"legacy/Implementation/#finished-bool","title":"finished: bool","text":"<p>Indicates whether the challenge run is completed or not, once it is set to <code>True</code> the step method won't be called any more and the run will end. Note that the run will also end if all solutions have crashed.</p>"},{"location":"legacy/Implementation/#level_name-str","title":"level_name: str","text":"<p>The name of the level. For a code test it should be descriptive and echo what is being tested. For challenges it is not as important to be descriptive, but it doesn't hurt. Usually taken from the configuration.</p>"},{"location":"legacy/Implementation/#max_score-int","title":"max_score: int","text":"<p>The total possible score for the level. For a code test this should usually be 10. For challenges this value might not make sense, but it is currently still required. Usually taken from the configuration.</p>"},{"location":"legacy/Implementation/#scores-int","title":"scores: [int]","text":"<p>A list of scores corresponding to each solution. Should be updated in each call to the step method.</p>"},{"location":"legacy/Implementation/#score-strategy","title":"Score strategy","text":"<p>How to score a tournament: tournaments should use a 70/30/0 scoring system for three participants. This is to avoid the issue that otherwise the ELO doesn't change if the scores are very close.</p>"},{"location":"legacy/Implementation/#the-configurations","title":"The configurations","text":"<p>The challenge usually has a <code>_configuration</code> list containing a dictionary for each level. This dictionary can be used to store the level configuration (constants, initial values, flags, etc) and usually contain the following items.</p>"},{"location":"legacy/Implementation/#name-str_1","title":"name (str)","text":"<p>The level name (used to set <code>level_name</code>).</p>"},{"location":"legacy/Implementation/#show_canvas-bool","title":"show_canvas (bool)","text":"<p>A flag indicating if the canvas should be rendered or not. The canvas should always be rendered for public levels, and preferably also for hidden levels. The flag is often False for performance levels in code tests due to the large input size.</p>"},{"location":"legacy/Implementation/#max_score-int_1","title":"max_score (int)","text":"<p>The maximum score for the level (used to set <code>max_score</code>).</p>"},{"location":"legacy/Implementation/#logging-and-printing","title":"Logging and printing","text":""},{"location":"legacy/Implementation/#print-from-the-solution","title":"Print from the solution","text":"<p>To print from the solution to the console just use the regular print statement used by your language. In python3 it would be <code>print('hello world')</code>.</p>"},{"location":"legacy/Implementation/#print-from-the-implementation","title":"Print from the implementation","text":"<p>To print from the implementation just use the regular print statement for Python3.</p>"},{"location":"legacy/Implementation/#example-implementations","title":"Example implementations","text":"<p>The example implementations are functionally very simple and are only intended to demonstrate some different concepts that can be used when writing an implementation.</p>"},{"location":"legacy/Implementation/#exercise-example","title":"Exercise example","text":"<p>In this implementation the candidate should compute the sum and difference of two numbers. The candidate methods are <code>sum() -&gt; int</code> and <code>difference() -&gt; int</code>. The API methods are <code>get_a() -&gt; int</code> and <code>get_b() -&gt; int</code>.</p> Exercise example <pre><code>\"\"\"\nThis is the module containing the challenge implementation.\n\"\"\"\nfrom lib.exceptions import SolutionException\n\nclass Challenge:\n    \"\"\"\n    A new challenge object is created when a challenge level is run.\n\n    :var finished: Whether the level run is finished or not.\n    :vartype finished: bool\n    :var level_name: The name of the current level.\n    :vartype level_name: str\n    :var max_score: The highest possible score for the level.\n    :vartype max_score: int\n    :var scores: The scores for all solutions.\n    :vartype scores: [int]\n    \"\"\"\n\n    def __init__(self, context):\n        \"\"\"\n        :param contex: An object containing relevant information for this run.\n            Read the provided challenge creation documentation for more details.\n        \"\"\"\n        self._context = context\n\n        # At the end of this template there is a list of level configurations.\n        # Here we check the level value and look up the current configuration.\n        if not 0 &lt;= self._context.level &lt;= len(self._configurations):\n            raise Exception(f'There is no level {self._context.level}')\n        self._config = self._configurations[self._context.level]\n\n        # These attibutes are used by the challenge runner (do not remove).\n        self.finished = False\n        self.level_name = self._config['name']\n        self.max_score = self._config['max_score']\n        self.scores = [0] * len(self._context.solutions)\n\n        # Setup initial values, should assume failure.\n        self._sum_answer = None\n        self._sum_correct = False\n        self._diff_answer = None\n        self._diff_correct = False\n\n        # Setup the canvas.\n        self._show_canvas = self._config['show_canvas']\n        if self._show_canvas:\n            self._setup_canvas()\n\n    def step(self):\n        \"\"\"\n        Executes a single step of the challenge.\n        This includes calling solutions, updating the scores, and updating the canvas.\n\n        This method is continously called until either \"finished\" is set to \"True\"\n        or all solutions have crashed.\n        \"\"\"\n        # Use this method to gracefully handle crashed solutions.\n        for solution in self._context.living_solutions():\n            try:\n                # Do not call the solution methods more than once.\n                self._sum_answer = solution.sum()\n                if self._sum_answer == self._config['sum']:\n                    self._sum_correct = True\n                    self.scores[solution.index] += 4\n                # Fully handle each task in turn, in case of crashes.\n                self._diff_answer = solution.difference()\n                if self._diff_answer == self._config['diff']:\n                    self._diff_correct = True\n                    self.scores[solution.index] += 6\n            except SolutionException:\n                # A SolutionException is the only exception that should be caughthen\n                # calling a soluti and it must be caught when calling a solution.\n                pass\n\n        # Update the canvas.\n        if self._show_canvas:\n            self._update_canvas()\n\n        # A code test usually only has one step.\n        self.finished = True\n\n    def get_a(self, solution):\n        \"\"\"\n        :param solution: The solution that called this api method.\n\n        :rtype: int\n        \"\"\"\n        return self._config['a']\n\n    def get_b(self, solution):\n        \"\"\"\n        :param solution: The solution that called this api method.\n\n        :rtype: int\n        \"\"\"\n        return self._config['b']\n\n    def _setup_canvas(self):\n        \"\"\"\n        Performs canvas setup before a solution is run.\n        Read the provided documentation for details on how to use the canvas.\n        \"\"\"\n        canvas = self._context.canvas\n        # Show input data\n        canvas.new_text(f'Input: {self._config[\"a\"]} and {self._config[\"b\"]}', 20, 'black',tx= y=20) \n        # Show task titles and expected answers.\n        canvas.new_text('Task 1: sum', 20, 'black', x=20, y=60)\n        canvas.new_text('Task 2: difference', 20, 'black', x=200, y=60)\n        canvas.new_text(f'Expected: {self._config[\"sum\"]}', 16, 'black', x=20, y=90)\n        canvas.new_text(f'Expected: {self._config[\"diff\"]}', 16, 'black', x=200, y=90)\n        # Add sections for candidate answers, to later be updated.\n        self._sum_label = canvas.new_text('Actual: ___', 16, 'black', x=20, y=120)\n        self._diff_label = canvas.new_text('Actual: ___', 16, 'black', x=200, y=120)\n\n    def _update_canvas(self):\n        \"\"\"\n        Updates the canvas for each challenge step.\n        Read the provided documentation for details on how to use the canvas.\n        \"\"\"\n        canvas = self._context.canvas\n        # Update the canvas with candidate answers.\n        if self._sum_answer is None:\n            self._sum_label.set_text('Actual: N/A')\n        else:\n            self._sum_label.set_text(f'Actual: {self._sum_answer}')\n        if self._diff_answer is None:\n            self._diff_label.set_text('Actual: N/A')\n        else:\n            self._diff_label.set_text(f'Actual: {self._diff_answer}')\n        # Add correct/incorrect labels.\n        if self._sum_correct:\n            canvas.new_text('Correct', 16, 'green', x=20, y=150)\n        else:\n            canvas.new_text('Incorrect', 16, 'red', x=20, y=150)\n        if self._diff_correct:\n            canvas.new_text('Correct', 16, 'green', x=200, y=150)\n        else:\n            canvas.new_text('Incorrect', 16, 'red', x=200, y=150)\n\n    _configurations = [\n        {\n            # Level 1 (Public)\n            'name': 'Level 1',\n            'show_canvas': True,\n            'max_score': 10,\n            'a': 7,\n            'b': 3,\n            'sum': 10,\n            'diff': 4,\n        },\n        {\n            # Level 2 (Public)\n            'name': 'Level 2',\n            'show_canvas': True,\n            'max_score': 10,\n            'a': 16,\n            'b': 24,\n            'sum': 40,\n            'diff': 8,\n        },\n    ]\n</code></pre>"},{"location":"legacy/Implementation/#challenge-example","title":"Challenge example","text":"<p>In this challenge all players get to guess on a number. The number should be just above the mean of all the guesses to get maximum points, if it is on or below they get no points. This continues for a number of rounds.</p> <p>The candidate methods are <code>guess_mean() -&gt; int</code>. The API methods are <code>last_mean() -&gt; int</code>.</p> Challenge example <pre><code>\"\"\"\nThis is the module containing the challenge implementation.\n\"\"\"\nfrom lib.exceptions import SolutionException\nfrom statistics import mean\n\nclass Challenge:\n    \"\"\"\n    A new challenge object is created when a challenge level is run.\n\n    :var finished: Whether the level run is finished or not.\n    :vartype finished: bool\n    :var level_name: The name of the current level.\n    :vartype level_name: str\n    :var max_score: The highest possible score for the level.\n    :vartype max_score: int\n    :var scores: The scores for all solutions.\n    :vartype scores: [int]\n    \"\"\"\n\n    def __init__(self, context):\n        \"\"\"\n        :param contex: An object containing relevant information for this run.\n            Read the provided challenge creation documentation for more details.\n        \"\"\"\n        self._context = context\n\n        # At the end of this template there is a list of level configurations.\n        # Here we check the level value and look up the current configuration.\n        if not 0 &lt;= self._context.level &lt;= len(self._configurations):\n            raise Exception(f'There is no level {self._context.level}')\n        self._config = self._configurations[self._context.level]\n\n        # These attibutes are used by the challenge runner (do not remove).\n        self.finished = False\n        self.level_name = self._config['name']\n        self.max_score = self._config['max_score']\n        self.scores = [0] * len(self._context.solutions)\n\n        # Setup variable used for the game.\n        self._guesses = {}\n        self._gains = {}\n        self._last_mean = None\n        self._rounds = self._config['rounds']\n        self._current_round = 0\n\n        # Setup the canvas.\n        self._show_canvas = self._config['show_canvas']\n        if self._show_canvas:\n            self._setup_canvas()\n\n    def step(self):\n        \"\"\"\n        Executes a single step of the challenge.\n        This includes calling solutions, updating the scores, and updating the canvas.\n\n        This method is continously called until either \"finished\" is set to \"True\"\n        or all solutions have crashed.\n        \"\"\"\n        # Setup the new round.\n        self._guesses = {}\n        self._gains = {}\n        self._current_round += 1\n        self._context.console.debug(f'Starting round {self._current_round}')\n        # Go through all solutions that still are running.\n        for solution in self._context.living_solutions():\n            try:\n                # Collect the guesses from each solution.\n                self._guesses[solution.index] = solution.guess_mean()\n                self._context.console.debug(f'Solution {solution.index} guessed {self._gues[solution.index]}')`  \n            except SolutionException:\n                # A SolutionException is the only exception that should be caught whe\n                # calling a solution, and it must be caught when calling a solution.\n                pass\n\n        # Calculate new points (if any results where obtained).\n        if self._guesses:\n            # Calculate the mean.\n            self._last_mean = round(mean(self._guesses.values()))\n            self._context.console.debug(f'Mean is {self._last_mean}')\n            # Award points.\n            for index, guess in self._guesses.items():\n                if self._last_mean &lt; guess &lt; self._last_mean + 100:\n                    self._gains[index] = 100 - (guess - self._last_mean)\n                    self.scores[index] += self._gains[index]\n            self._context.console.debug(f'New scores are {self.scores}')\n        else:\n            self._last_mean = None\n\n        # Update the canvas.\n        if self._show_canvas:\n            self._update_canvas()\n\n        # Limit the number of steps to the specified number of rounds.\n        if self._current_round &gt;= self._rounds:\n            self.finished = True\n\n    def last_mean(self, solution):\n        \"\"\"\n        :param solution: The solution that called this api method.\n\n        :rtype: int\n        \"\"\"\n        solution.console.debug(f'Solution {solution.index} called \"last_mean\"')\n        # Disallow calling 'last_mean' until after the first round.\n        if self._last_mean is None:\n            raise SolutionException('\"last_mean\" may only be called after the first round'\n        return self._last_mean\n\n    def _setup_canvas(self):\n        \"\"\"\n        Performs canvas setup before a solution is run.\n        Read the provided documentation for details on how to use the canvas.\n        \"\"\"\n        canvas = self._context.canvas\n        # Create the player table.\n        canvas.new_text('Player', 14, 'black', x=10, y=10)\n        canvas.new_text('Guess', 14, 'black', x=200, y=10)\n        canvas.new_text('Gain', 14, 'black', x=275, y=10)\n        canvas.new_text('Score', 14, 'black', x=350, y=10)\n        self._guess_labels = []\n        self._gain_labels = []\n        self._score_labels = []\n        for index, solution in enumerate(self._context.solutions):\n            # Need to check if solution exists, otherwise use placeholder name.\n            name = solution.name if solution else f'Player {index}'\n            canvas.new_text(name, 12, 'black', x=10, y=20*index+30)\n            label = canvas.new_text('N/A', 12, 'black', x=200, y=20*index+30)\n            self._guess_labels.append(label)\n            label = canvas.new_text(0, 12, 'black', x=275, y=20*index+30)\n            self._gain_labels.append(label)\n            label = canvas.new_text(0, 12, 'black', x=350, y=20*index+30)\n            self._score_labels.append(label)\n        # Create entry for the mean.\n        canvas.new_text('Mean', 14, 'black', x=10, y=180)\n        self._mean_label = canvas.new_text('N/A', 14, 'black', x=200, y=180)\n\n    def _update_canvas(self):\n        \"\"\"\n        Updates the canvas for each challenge step.\n        Read the provided documentation for details on how to use the canvas.\n        \"\"\"\n        canvas = self._context.canvas\n        # Update player table.\n        for index in range(len(self._context.solutions)):\n            self._guess_labels[index].set_text(self._guesses.get(index, 'N/A'))\n            self._gain_labels[index].set_text(self._gains.get(index, 0))\n            self._score_labels[index].set_text(self.scores[index])\n        # Update the mean.\n        self._mean_label.set_text('N/A' if self._last_mean is None else self._last_mean)\n\n    _configurations = [\n        {\n            # Level 1 (Public)\n            'name': 'Level 1',\n            'show_canvas': True,\n            'max_score': 10,\n            'rounds': 5,\n        },\n        {\n            # Level 2 (Public)\n            'name': 'Level 2',\n            'show_canvas': True,\n            'max_score': 10,\n            'rounds': 10,\n        },\n    ]\n</code></pre>"},{"location":"legacy/Implementation/#parallel-challenge-example","title":"Parallel Challenge example","text":"<p>This is the same challenge as the previous example, but it calls the solutions in parallel.</p> Parallel Challenge example <pre><code>\"\"\"\nThis is the module containing the challenge implementation.\n\"\"\"\nfrom lib.exceptions import SolutionException\nfrom statistics import mean\n\nclass Challenge:\n    \"\"\"\n    A new challenge object is created when a challenge level is run.\n\n    :var finished: Whether the level run is finished or not.\n    :vartype finished: bool\n    :var level_name: The name of the current level.\n    :vartype level_name: str\n    :var max_score: The highest possible score for the level.\n    :vartype max_score: int\n    :var scores: The scores for all solutions.\n    :vartype scores: [int]\n    \"\"\"\n\n    def __init__(self, context):\n        \"\"\"\n        :param contex: An object containing relevant information for this run.\n            Read the provided challenge creation documentation for more details.\n        \"\"\"\n        self._context = context\n\n        # At the end of this template there is a list of level configurations.\n        # Here we check the level value and look up the current configuration.\n        if not 0 &lt;= self._context.level &lt;= len(self._configurations):\n            raise Exception(f'There is no level {self._context.level}')\n        self._config = self._configurations[self._context.level]\n\n        # These attibutes are used by the challenge runner (do not remove).\n        self.finished = False\n        self.level_name = self._config['name']\n        self.max_score = self._config['max_score']\n        self.scores = [0] * len(self._context.solutions)\n\n        # Setup variable used for the game.\n        self._guesses = {}\n        self._gains = {}\n        self._last_mean = None\n        self._rounds = self._config['rounds']\n        self._current_round = 0\n\n        # Setup the canvas.\n        self._show_canvas = self._config['show_canvas']\n        if self._show_canvas:\n            self._setup_canvas()\n\n    def step(self):\n        \"\"\"\n        Executes a single step of the challenge.\n        This includes calling solutions, updating the scores, and updating the canvas.\n\n        This method is continously called until either \"finished\" is set to \"True\" \n        or all solutions have crashed.\n        \"\"\"\n        # Setup the new round.\n        self._guesses = {}\n        self._gains = {}\n        self._current_round += 1\n        self._context.console.debug(f'Starting round {self._current_round}')\n        # Go through all solutions that still are running, in parallel.\n        for index, result in self._context.parallel.guess_mean().items():\n            # Skip solutions that caused an exception.\n            if isinstance(result, SolutionException):\n                continue\n            # Collect the guess.\n            self._guesses[index] = result\n            self._context.console.debug(f'Solution {index} guessed {result}')\n\n        # Calculate new points (if any results where obtained).\n        if self._guesses:\n            # Calculate the mean.\n            self._last_mean = round(mean(self._guesses.values()))\n            self._context.console.debug(f'Mean is {self._last_mean}')\n            # Award points.\n            for index, guess in self._guesses.items():\n                if self._last_mean &lt; guess &lt; self._last_mean + 100:\n                    self._gains[index] = 100 - (guess - self._last_mean)\n                    self.scores[index] += self._gains[index]\n            self._context.console.debug(f'New scores are {self.scores}')\n        else:\n            self._last_mean = None\n\n        # Update the canvas.\n        if self._show_canvas:\n            self._update_canvas()\n\n        # Limit the number of steps to the specified number of rounds.\n        if self._current_round &gt;= self._rounds:\n            self.finished = True\n\n    def last_mean(self, solution):\n        \"\"\"\n        :param solution: The solution that called this api method.\n\n        :rtype: int\n        \"\"\"\n        solution.console.debug(f'Solution {solution.index} called \"last_mean\"')\n        # Disallow calling 'last_mean' until after the first round.\n        if self._last_mean is None:\n            raise SolutionException('\"last_mean\" may only be called after the first round')\n        return self._last_mean\n\n    def _setup_canvas(self):\n        \"\"\"\n        Performs canvas setup before a solution is run.\n        Read the provided documentation for details on how to use the canvas.\n        \"\"\"\n        canvas = self._context.canvas\n        # Create the player table.\n        canvas.new_text('Player', 14, 'black', x=10, y=10)\n        canvas.new_text('Guess', 14, 'black', x=200, y=10)\n        canvas.new_text('Gain', 14, 'black', x=275, y=10)\n        canvas.new_text('Score', 14, 'black', x=350, y=10)\n        self._guess_labels = []\n        self._gain_labels = []\n        self._score_labels = []\n        for index, solution in enumerate(self._context.solutions):\n            # Need to check if solution exists, otherwise use placeholder name.\n            name = solution.name if solution else f'Player {index}'\n            canvas.new_text(name, 12, 'black', x=10, y=20*index+30)\n            label = canvas.new_text('N/A', 12, 'black', x=200, y=20*index+30)\n            self._guess_labels.append(label)\n            label = canvas.new_text(0, 12, 'black', x=275, y=20*index+30)\n            self._gain_labels.append(label)\n            label = canvas.new_text(0, 12, 'black', x=350, y=20*index+30)\n            self._score_labels.append(label)\n        # Create entry for the mean.\n        canvas.new_text('Mean', 14, 'black', x=10, y=180)\n        self._mean_label = canvas.new_text('N/A', 14, 'black', x=200, y=180)\n\n    def _update_canvas(self):\n        \"\"\"\n        Updates the canvas for each challenge step.\n        Read the provided documentation for details on how to use the canvas.\n        \"\"\"\n        canvas = self._context.canvas\n        # Update player table.\n        for index in range(len(self._context.solutions)):\n            self._guess_labels[index].set_text(self._guesses.get(index, 'N/A'))\n            self._gain_labels[index].set_text(self._gains.get(index, 0))\n            self._score_labels[index].set_text(self.scores[index])\n        # Update the mean.\n        self._mean_label.set_text('N/A' if self._last_mean is None else self._last_mean)\n\n    _configurations = [\n        {\n            # Level 1 (Public)\n            'name': 'Level 1',\n            'show_canvas': True,\n            'max_score': 10,\n            'rounds': 5,\n        },\n        {\n            # Level 2 (Public)\n            'name': 'Level 2',\n            'show_canvas': True,\n            'max_score': 10,\n            'rounds': 10,\n        },\n    ]\n</code></pre>"}]}